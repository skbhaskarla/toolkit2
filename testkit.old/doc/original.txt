= How to Report Results =

== Uploading test log reference ==

To evaluate many tests it is necessary to review the contents of the Test Log associated with the Public Registry server.  When this is called for, identify your results in the Test Log using the [http://129.6.24.109:9080/LogReader Test Log Browser].  Then submit the [[XDS_Test_Log_Browser#Logging_the_message_id|reference to your test instance]] in a file named testlog.txt.

== Log Results of Provide and Register or Register transaction tested against the Public Registry Repository ==
When testing the Provide & Register transaction or the Register transaction against the Public Registry/Repository, the test
directions either directed you to use 
: the test tool [[Xdstest2_testing_tool|xdstest2]] or 
: to configure your Document Source actor or
: to configure your Combined Document Source / Document Repository 

to produce a submission. If the test was started by your 
* Document Source or Combined Document Source / Document Repository actor implementation then Log the XDSSubmissionSet.uniqueId attribute of the submission then use one of the three following options:

# Log the message id (or message link) via the directions [[XDS_Test_Log_Browser#Logging_the_message_id|here]]
# Or logging by uniqueId. This is done by:
#*# Create a text file named ''uniqueid.txt''. 
#*# In this file put the value of the XDSSubmissionSet.uniqueId attribute.  
#*# Upload this file to Kudu.
* If the test was started by [[Xdstest2_testing_tool|xdstest2]], submit the resulting log.xml file.

Instructions on how to log test results to Kudu can be found [[#The_Test_Management_Tool_-_how_to_report_results_to_the_Test_Managers|here]]

== Log Results of Query or Stored Query transactions tested against the Public Registry ==
When testing the Query Registry transaction or Stored Query transaction against the Public Registry:

# Perform the query using your Document Consumer 
# Use the [[XDS Test Log Browser]] to find the log event describing your query.
# Select the log event, displaying the detail on the right side of the screen.
# In the upper right corner of the browser page, select the link next to the '''Message ID:''' label.
# Copy this url and place it in a file named url.txt
# Submit this file to Kudu as evidence of your successful test

== Log Results of Register transaction against your Registry ==
The following details shall be logged to the test management tool:
* file log.xml generated by [[Xdstest2_testing_tool|xdstest2]].
Instructions on how to log test results can be found [[#The_Test_Management_Tool_-_how_to_report_results_to_the_Test_Managers|here]]

== Log Results of Query or Stored Query transaction against your Registry ==

This test will be run using the command line tool [[Xdstest2_testing_tool|xdstest2]] which produces a log file log.xml.

* The file log.xml must be logged into Kudu as evidence of successful test completion

Instructions on how to log test results can be found [[#The_Test_Management_Tool_-_how_to_report_results_to_the_Test_Managers|here]]

== Result Reporting - Server Testing using xdstest ==

This is to be used when using xdstest to test your Registry actor implementation.

The following details shall be logged to the test management tool:
* file log.msg generated by xdstest, it will contain:
** Patient ID used in testing.  It must be unique for the test. You must edit this field (patientid=) into test.properties
** Request sent to the server. 
** RegistryResponse XML response from the server. 
If xdstest generates the files request.msg and result.msg instead of log.msg, you need to download the newer version of xdstest from [[XDS_Test_Kit_2005-2006#Testing_Tool_-_xdstest | here]]
* If the test being reported is a submission then include:
** Response from a GetAll query ([[XDS_Test_Kit_2005-2006_Test_Descriptions#11806 | 11806]])(returnType="LeafClass") issued against the patientId used. 
** In this query, you must use $status = ('Approved', 'Deprecated')
You can use xdstest and test 11806 (modifying the patient ID used in the test) to retrieve this data.

In situations where you must upload more that one file to the test management tool, each file must have a unique name or it will not upload. If you are uploading 2 log.msg files, just give them multiple names like log1.msg, log2.msg.

== Result Reporting - Server Testing using xdstest and the public registry ==

This is to be used when using xdstest to test your Repository actor implementation.

The following details shall be logged to the test management tool:
* file log.msg generated by xdstest, it will contain:
** Patient ID used in testing.  It must be unique for the test. You must edit this field (patientid=) into test.properties
** Request sent to the server. 
** RegistryResponse XML response from the server. 
If xdstest generates the files request.msg and result.msg instead of log.msg, you need to download the newer version of xdstest from [[XDS_Test_Kit_2005-2006#Testing_Tool_-_xdstest | here]]

== The Test Management Tool - how to report results to the Test Managers ==

The Test Management Tool, called Kudu, is a web site that you will use to record the results of your testing. Each required test for each company is presented as a separate web page inside the tool. In this area a vendor can upload log files to document the results of a test. In the XDS test procedures, when asked to 'log the following information' we are refering to uploading files into Kudu.

= Configuring and running the TestPlan =

Most tests to be run against Registry, Repository, and Receiving Gateway actors use the [[Xdstest2_testing_tool|xdstest2]] tool. Most tests require that you configure the test plan, execute it, and evalute the resulting log file.  Each test is defined in a directory of the download-able test kit. Tests are found under the directory ''tests''. Each test has its own directory named with the test number.  To configure the test, edit the testplan.xml file in the test directory.  Change the value of the ''RegistryEndpoint'' element to point to your Repository, Registry, or Receiving Gateway, depending on the test being run. Then use the xdstest2 command to run the test.  The results are placed in the file log.xml.  The file log.xml must be submitted to evaluation by the test monitors. Documentation for the xdstest2 tool can be found [[Xdstest2_testing_tool|here]].

Typical configuration changes are:
* Endpoint of your actor implementation
* repositoryUniqueId (for XDS.b Retrieve tests)
* Patient Id to use for the test. For most tests this is controlled from the mgmt sub-directory of the xdstest2tool installation.  The file patientid_base.txt holds the patient-specific part of the Patient ID and the file assigning_authority.txt holds the domain-specific part of the Patient ID. A Patient Id is constructed by concatenating the contents of patientid_base.txt followed by the string ^^^ followed by the contents of assigning_authority.txt.
* HomeCommunityId of the Receiving Gateway (Receiving Gateway tests only). The file mgmt/default.xml of the xdstest2tool installation holds the homeCommunityId of the Receiving Gateway being tested.  This must be updated to match your local configuration.  The default contents of the file look like:
<pre>
<Configuration>
  <HomeCommunityId>urn:oid:1.19.6.24.109.42.1.3</HomeCommunityId>
</Configuration>
</pre>
You must edit in the real value of your HomeCommunityId to pass any Receiving Gateway tests.

= Evaluating the results of the TestPlan =

The results of the test plan are placed in the file log.xml in the test directory. The test status is placed in the status attribute of the TestResults element (top level element). All tests, when successful, end with a status of ''Pass''.

<pre>
<TestResults status="Pass">
 <RegistryEndpoint>http://localhost:9080/axis2/services/test11966</RegistryEndpoint>
 <TestStep id="submit" status="Pass">
</pre>

If status="Fail" then one or more of the TestStep sections will have status="Fail" OR there will be a FatalError element at the bottom of the file indicating a large failure.

= Patient IDs and uniqueIds in test material =

All test and example metadata provided in the testkit has the patientId and uniqueIds coded as variables.  These variables look like
* $PatientId
* $uniqueId01, $uniqueId02 ...
To use, real patientIDs and uniqueIds must be allocated and be inserted in metadata replacing the variables.

= Evaluations =

== Schema ==

Metadata validated against appropriate Schema(s)

== Metadata Validator ==

Tool that checks for metadata structure required by the standard but beyond the capability of XML Schema. Also checks for structural and coding rules imposed by the XDS profile.

= Using the Public Registry =

The Public Registry is used to support XDS testing. There are several rules to follow when testing against this combined Document Registry and Document Repository actor implementation.

# All patient IDs must be registered. Many tests require the use of a unique Patient ID for the test. XDSSubmissionSet, XDSDocuentEntry, and XDSFolder all have attributes for patientID.
# All XDSSubmissionSet, XDSDocumentEntry, and XDSFolder objects must contain uniqueId attributes that are unique in this registry.

The following sections document how to follow these rules.

== Allocating new Patient IDs for Testing ==
The Registry actor, per the XDS Profile specification, validates patient IDs against against those received in the Patient Identify Feed.  The Public Registry will reject submissions if they reference a non-registered Patient ID. 

To generate patient ID for a testing against the Public Registry, go to the 
[http://129.6.24.109:9080/xdstools/index.html XDS Tools Page] and select ''Allocate Patient ID''. A new Patient ID will be returned. You may use this Patient ID in as many tests as you like.

== Allocating uniqueIDs for testing ==

The public registry implementation, according to the XDS Profile, validates the uniqueness of the uniqueId attributes of Documents, Folders, and Submission Sets. Contact your regional Test Manager to be assigned an OID base to be used for constructing uniqueIds. If OID bases are not being managed for this testing event, you still need to generate unique OIDs for unique ID attributes in XDS.  You can use what ever method you like but the Public Registry will validate 
# unique IDs are formatted as OIDs
# The unique IDs are unique as required by the XDS profile
When using the test tool [[Xdstest2_testing_tool|xdstest2]], it will automatically generate unique IDs for you.

= Test Data Description =

== From test 11870 ==

This test set has been loaded into the Public Registry multiple times.  The original, shown below, has two flaws: other users submitted data to this same patient ID and the authorPerson attribute is in the wrong format.  The second submission, shown second below, fixes the authorPerson attribute and is submitted for a Patient ID which I have locked so others cannot accidentally submit additional material.

'''Note that these are for Query testing only. There are no documents behind this metadata. Having no idea what folks are doing with content, I will submit and post in this section content that you send me.  -bill'''

=== Submission 1 ===

The table below briefly describes the test data loaded into the Public Registry for testing. The same data is available in test [[#11870]] for use in vendor registries.

All patientIds are shown without their ^^^&1.3.6.1.4.1.21367.2005.3.7&ISO suffix.

All uniqueIds are shown without their 129.6.58.91. prefix.

<table border="1" width="100%">

<tr BGCOLOR="#CCCCCC">
	<td><b>PatientId</b></td>
	<td><b>SS uniqueId</b></td>
	<td><b>Doc uniqueId</b></td>
	<td><b>Fol uniqueId</b></td>
	<td><b>Description</b></td>
</tr>

<tr>
  <td>428db2e57eaf4aa</td>
  <td>4895</td>
  <td></td>
  <td></td>
  <td>One document submission</td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>4894</td>
  <td></td>
  <td></td>
</tr>



<tr>
  <td>428db2e57eaf4aa</td>
  <td>4897</td>
  <td></td>
  <td></td>
  <td>Single document in a folder submission</td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>4896</td>
  <td></td>
  <td></td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td></td>
  <td>4898</td>
  <td></td>
</tr>

<tr>
  <td>428db2e57eaf4aa</td>
  <td>4901</td>
  <td></td>
  <td></td>
  <td>One folder and two documents submission</td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>4899</td>
  <td></td>
  <td></td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>4900</td>
  <td></td>
  <td></td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td></td>
  <td>4902</td>
  <td></td>
</tr>


</table>

=== Submission 2 ===

The table below briefly describes the test data loaded into the Public Registry for testing. The same data is available in test [[#11870]] for use in vendor registries. This is an update to Submission 1 when issues were found with its metadata content.

All patientIds are shown without their ^^^&1.3.6.1.4.1.21367.2005.3.7&ISO suffix.

All uniqueIds are shown without their 129.6.58.91. prefix.

<table border="1" width="100%">

<tr BGCOLOR="#CCCCCC">
	<td><b>PatientId</b></td>
	<td><b>SS uniqueId</b></td>
	<td><b>Doc uniqueId</b></td>
	<td><b>Fol uniqueId</b></td>
	<td><b>Description</b></td>
</tr>

<tr>
  <td>306268c3314d406</td>
  <td>9737</td>
  <td></td>
  <td></td>
  <td>One document submission</td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>9736</td>
  <td></td>
  <td></td>
</tr>



<tr>
  <td>306268c3314d406</td>
  <td>9739</td>
  <td></td>
  <td></td>
  <td>Single document in a folder submission</td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>9738</td>
  <td></td>
  <td></td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td></td>
  <td>9740</td>
  <td></td>
</tr>

<tr>
  <td>306268c3314d406</td>
  <td>9743</td>
  <td></td>
  <td></td>
  <td>One folder and two documents submission</td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>9741</td>
  <td></td>
  <td></td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>9742</td>
  <td></td>
  <td></td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td></td>
  <td>9744</td>
  <td></td>
</tr>


</table>

=== Submission 3 ===

The table below briefly describes the test data loaded into the Public Registry for testing. The same data is available in test [[#11870]] for use in vendor registries. This is an update to Submission 1 when issues were found with its metadata content.

All patientIds are shown without their ^^^&1.3.6.1.4.1.21367.2005.3.7&ISO suffix.

All uniqueIds are shown without their 129.6.58.91. prefix.

This version fixed the following bugs:
: Attribute URI missing - it now points to a small txt document, size and hash match
: two versions of testplan.xml are provided in the test kit, one coded for XDS.a, the other for XDS.b

<table border="1" width="100%">

<tr BGCOLOR="#CCCCCC">
	<td><b>PatientId</b></td>
	<td><b>SS uniqueId</b></td>
	<td><b>Doc uniqueId</b></td>
	<td><b>Fol uniqueId</b></td>
	<td><b>Description</b></td>
</tr>

<tr>
  <td>270a59d7a8b145b</td>
  <td>12408</td>
  <td></td>
  <td></td>
  <td>One document submission</td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>12407</td>
  <td></td>
  <td></td>
</tr>



<tr>
  <td>270a59d7a8b145b</td>
  <td>12410</td>
  <td></td>
  <td></td>
  <td>Single document in a folder submission</td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>12409</td>
  <td></td>
  <td></td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td></td>
  <td>12411</td>
  <td></td>
</tr>

<tr>
  <td>270a59d7a8b145b</td>
  <td>12414</td>
  <td></td>
  <td></td>
  <td>One folder and two documents submission</td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>12412</td>
  <td></td>
  <td></td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td>12413</td>
  <td></td>
  <td></td>
</tr>

<tr>
  <td></td>
  <td></td>
  <td></td>
  <td>12415</td>
  <td></td>
</tr>


</table>

== Contributed Content ==

=== Scan Document (CDA wrapped PDF) ===

In the Public Registry:

XDSDocumentEntry.uniqueId = 1.2.3.4.100000022002209036.1196211173506.1

URI = http://129.6.24.109:9080/Repository/1.2.3.4.100000022002209036.1196211173506.1.xml

= Individual Tests =

==  11710 == 

'''Connection + IP Registration'''

The primary purpose of this test is to help manage the users of the Public Registry by associating a Vendor Name with an IP address. This allows the test managers to find your test data based on our displays. This is occasionally necessary to help answer questions. If you are testing a Document Repository then you need to download the XDS testkit to run all your tests and so you have the choice of running test 11710 or registering via the Test Log Browser.  The instructions for registering via test 11710 are described below under '''Test Procedure'''. If you are testing a Document Registry then you have no interaction with the Public Registry and this test is not necessary.  If you are testing a Document Source or Document Consumer actor then a new facility built into the Test Log Browser can be used instead of this test which gets you out of downloading and installing the xdstest2 testing tool. You can find documentation on using the Test Log Browser to register [[XDS_Test_Log_Browser#Registering_your_Vendor_Name|here]].


'''References'''
: None

'''Actors Tested'''
: None

'''Test Procedure'''

# Edit the file tests/11710/testplan.xml
# Edit the following fields:
#* <Your Company Name> (include product name is testing more than one).
#* <Your Name>
#* <Your Email>
#Send this metadata as a Submission Request by executing the following from a command prompt:
#*Change directory to tests/11710
#* [[#Configuring_and_running_the_TestPlan|Run]] the test plan
#* [[#Evaluating_the_results_of_the_TestPlan|Verify]] the test was successful
#This test does not need to be reported to the Test Manager or logged to Kudu.
# If you test from more than one machine and therefore run this multiple times, please spell the company name the same each time.

To verify this test was successful, look in log.xml.  You should see:
: /TestResults[@status="Pass"] and
: /TestResults/TestStep[@status="Pass"]
: /TestResults/TestStep/SimpleTransaction/Result/rs:RegistryResponse[@status="urn:oasis:names:tc:ebxml-regrep:ResponseS
tatusType:Success"]

== 11720 ==

'''Metadata Validation Tool'''

XDS Schema and XDS Metadata Validator engine available as a web portal to support testing of registry metadata. This is not a reportable test but instead a reference to a development/debug tool.

'''References'''
: Tables 3.14.4.1-5 through 3.14.4.1-7 of ITI TF-2

'''Actors Tested'''
: None

'''Test Procedure'''

# Assemble Repository Submission Metadata or Registry Submission Metadata in a file.
# Bring up [http://129.6.24.109:9080/xdstools/jsp/validationService/index.jsp Validator] in your web browser.
# Select type of submission (Registry or Repository)
# Select submission file
# Submit button

The web portal validates your metadata with the XDS/ebXML Registry v2.1 Schema and XDS Metadata Validator and return results. This Schema/Validator pair is also installed on the Public Registry.  This validation is run on every submission.

==  11721 == 

'''Basic Transport'''

This test can be used to test any SOAP transport. It supports tests labeled 11721 and 11814.

Test basic transport mechanisms, HTTP and SOAP, for transferring metadata without mutual TLS authentication. Document Repository makes an HTTP connection to Document Registry. A simple SOAP package is transferred containing simple non-metadata XML. The Registry may return an error message because the payload is not metadata. This is acceptable.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry OR Document Repository 

'''Testing Document Registry Actor'''
# Edit test/11721/test.properties
# Change the URL parameter to point to your registry or repository
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]]
# Do not log the results. This test is for debugging SOAP implementations only.

== 11728 ==

'''Submit a Folder via XDS.a'''

Verify that the XDS.a Document Source can submit a Folder via [[XDS_Transactions#Provide_and_Register_Document_Set-a|Provide and Register Document Set-a]] transaction.

'''References'''
: ITI TF-2 3.15

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: examples/11728 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Source Actor'''
# Configure your Document Source actor to submit to the Public Repository at EndPoint <nowiki>http://ihexds.nist.gov:9080/tf5/services/test11728</nowiki>
# Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Folder|Submission Set containing a single Folder]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-a|Provide and Register Document Set-a]] transaction 
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]

== 11729 ==

'''Submit a Folder with an initial document via XDS.a'''

Verify that the XDS.a Document Source can submit a Folder and initial document via [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction.

'''References'''
: ITI TF-2 3.15

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: examples/11729 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Source Actor'''
# Configure your Document Source actor to submit to the Public Repository at EndPoint <nowiki>http://ihexds.nist.gov:9080/tf5/services/test11729</nowiki>
# Submit a [[Metadata_Patterns# Submission Set containing a Single Folder with initial Document| Submission Set containing a Single Folder with initial Document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction 
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]

==  11730 == 

'''Add Document to Folder'''

Add a Document to an existing Folder.  The Folder is identified by its UUID which is obtained from a query of your choice. 

This submission consists of:
* an XDSSubmissionSet object
* an XDSDocumentEntry object
* a HasMember Association object linking the Submission Set to the Document
* a HasMember Association object linking the existing Folder (in Registry) with Document in submission
* a HasMember Association object linking the Submission Set to the Folder-Document Association
** An ObjectRef identifying the Folder as an object already in the registry

'''References'''
: ITI TF-2 3.15

'''Actors Tested'''
: Document Source

'''Dependencies'''
: Creation of a Folder to add the document to. Test 11728 describes this.

'''Testing Document Source Actor'''
# Allocate a new patient ID and uniqueIDs (see [[#Using_the_Public_Registry]])
# Create a Folder per test 11728.
# Configure the Document Source under test to send to the URL
#* <nowiki>http://ihexds.nist.gov:9080/tf5/services/test11730</nowiki>
# Identify the UUID of the Folder of interest with a query of your choosing
# Formulate a submission as described above or use the example metadata found in examples/11730
#* If you use this example, the Folder is referenced symbolically as "$Folder$". This must be replaced with the actual UUID of the folder object in the registry.  Addionally, an ObjectRef with its id set to this UUID must be present in the submission.
# Have your Document Source send the submission 
# Verify that you get a successful RegistryResponse message in return.
# Log the results: [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository]]

==  11731 == 

'''Register One Document'''

Verify that the Document Repository can generate a valid SOAP over HTTP message containing valid metadata representing a single document. The metadata will be validated against both the ebXML Registry Schema, XDS metadata rules and the ebXML Registry metadata requirements. The metadata must contain a Submission Set and a single XDSDocumentEntry.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Repository

'''Testing Document Repository Actor and Integrated Document Source/ Document Repository actor'''
# Allocate a new patient ID and uniqueIDs (see [[#Using_the_Public_Registry]])
# Configure the Repository under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/yr3a/registry?testeval=11731</nowiki>
# For Repository actors and Integrated Document Source/ Document Repository actors that offer the External Document Source option, use test/11731:
#* Edit the patient ID and unique ID attributes
#* Configure test.properties to send to your repository
#* Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]]
#* Log the results: [[#Log_Results_of_tests_against_a_Document_Repository_using_xdstest]]
# For Integrated Document Source/ Document Repository actors that do not offer the External Document Source option:
#* Generate a Register transaction equivalent to the above
#* Log the results: [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository]]
# Verify that you get a successful RegistryResponse message in return.

==  11732 == 

'''Register Two Documents'''

Verify that the Document Repository can generate a valid SOAP over HTTP message containing valid metadata representing a Submission Set and two documents. The metadata will be validated against both the ebXML Registry Schema, XDS metadata rules and the ebXML Registry metadata requirements. The metadata must contain a Submission Set and two XDSDocumentEntry objects.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Repository

'''Testing Document Repository Actor and Integrated Document Source/ Document Repository actor'''
# Allocate a new patient ID and uniqueIDs (see [[#Using_the_Public_Registry]])
# Configure the Repository under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/yr3a/registry?testeval=11732</nowiki>
# For Repository actors and Integrated Document Source/ Document Repository actors that offer the External Document Source option, use test/11732:
#* Edit the patient ID and unique ID attributes
#* Configure test.properties to send to your repository
#* Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]]
#* Log the results: [[#Log_Results_of_tests_against_a_Document_Repository_using_xdstest]]
# For Integrated Document Source/ Document Repository actors that do not offer the External Document Source option:
#* Generate a Register transaction equivalent to the above
#* Log the results: [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository]]
# Verify that you get a successful RegistryResponse message in return.

== 11733 ==

'''Accept Register One Document via XDS.a'''

Verify that the XDS.a Document Registry can accept a [[XDS_Transactions#Register_Document_Set-a|Register Document Set-a]] transaction containing metadata for a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]]. 

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Your registry must support the GetSubmissionSetAndContents Stored Query to pass the evaluation step of this test

'''You will need to'''
: None

'''Resources'''
: tests/11733 section of [[XDS_Test_Kit_Download|test kit]]


'''Testing Document Registry Actor'''
Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from both the ''submit'' and ''eval'' parts of the test.

==  11734 == 

'''Retrieve Document'''

Verify that Document Consumer can retrieve a document via the Retrieve Document transaction (HTTP Get).

'''References'''
: ITI TF-2 3.17

'''Actors Tested'''
: Document Consumer

'''Testing Document Consumer Actor'''

Using any available test data:
* [[#Scan_Document_.28CDA_wrapped_PDF.29]]
* [[#From test 11870]]

# Perform queries as is appropriate for your document Consumer leading up to the retrieval of the document
# Retrieve the document
# Log the results: Log, into Kudu, the time and date of the successful Retrieve (EST please)

== 11735 ==

'''Accept Register Two Documents'''

Verify that the Document Registry can accept a valid SOAP over HTTP message containing valid metadata representing two documents. The metadata will contain a Submission Set and two XDSDocumentEntry objects.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Testing Document Registry Actor'''
# Edit test/11735
#* Edit the patient ID attributes and uniqueId attributes for your registry
# Edit test/11735/test.properties
#* Change the URL parameter to point to your registry.
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Log the results: [[#Log_Results_of_Register_transaction_against_your_Registry]]

==  11736 == 

'''Submit Replace/Transformation for Existing Document'''

It is not necessary for Document Sources or Document Repositories to demonstrate this test.  Once test [[#11748]] has been successfully passed, this test will automatically be passed as well.


==  11737 == 

'''Submit Add By-Reference to Submission Set'''

It is possible to add a document to a submission set that has a different patient ID. First, the document itself must be added to the registry by submitting it in a Submission Set. An example of this is shown in examples/11746.  Then to add it to another Submission Set, one that possibly has a different patient ID, submit together or separately an association as follows:

<pre>
<Association associationType="HasMember" 
	sourceObject="the submission set UUID" 
	targetObject="symbolic name or UUID of document">
    <Slot name="SubmissionSetStatus">
        <ValueList>
            <Value>Reference</Value>
        </ValueList>
    </Slot>
</Association>
</pre>
where the SubmissionSetStatus is set to <i>Reference</i>. The new document and the association can be submitted together or separately.

Adding a Document to an existing Submission Set can be done in two ways. Given an existing Submission Set in the Registry:
# Submit the new Document (of course submission must include Submission Set) and the Association linking it to the existing Submission Set
# Submit the new Document. Submit the Assocation linking it to the existing Submission Set in a separate submission

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''Testing Document Source Actor'''
# Allocate a new patient ID and uniqueIDs (see [[#Using_the_Public_Registry]])
# Compose Submission Set as described above
#* Also, see examples/11737/metadata.xml
#* where "Another_SubmissionSet" is replaced with the UUID of the target Submission Set (already present in the Registry). 
# Configure the Document Source to submit to 
#*<nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/yr3a/repository?testeval=11737</nowiki>
# Do the Submit.
# Verify that you get a successful RegistryResponse message in return
# Log the results: [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository]]

== 11738 ==

'''Submit via Offline Mode'''

Generate a Provide and Register transaction via Offline Mode.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Source
: Document Repository

'''Dependencies'''
: None

'''Testing Document Source and Document Repository Actors'''
No support facilities are available to test this option. The exception is that Eric provides an email server to use to relay offline message. Contact Eric for details. To demonstrate success, again, contact Eric.

==  11739 == 

'''Retrieve with mutual TLS'''

Repeat test [[#11734]] with mutual TLS enabled.

==  11740 == 

'''Register with mutual TLS'''

Repeat any Register test over TLS

==  11741 == 

'''Query with mutual TLS'''

Repeat any Query test with mutual TLS enabled.

'''References'''
: ITI TF-2 3.15

'''Actors Tested'''
: Document Registry
: Document Consumer

'''Dependencies'''
: None

'''Testing Document Consumer Actor'''
# Rerun any Query test with mutual TLS enabled
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Rerun any Register test with mutual TLS enabled
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]





== 11744 ==

'''Accept Basic Transport - Document Repository'''

Test basic transport mechanisms, HTTP and SOAP, for transferring metadata without mutual TLS authentication between  the test tool xdstest and a Document Repository Actor. xdstest makes an HTTP connection to Document Repository. A simple SOAP package is transferred containing simple non-metadata XML.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Repository

'''Testing Document Repository Actor'''
# Edit test/11744/test.properties
#* Change the URL parameter to point to your repository
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]]
# Do not log the results, this is for testing/debug only.









==  11749 == 

'''Life-cycle Management'''

Verify that Document Source can issue the three variations on life-cycle management: transformation, addendum, replace with transformation. For each variation, an original document must be discovered through a query. Its UUID must be extracted from the query results. The new document is composed along with an APND, XFRM, or XFRM_RPLC Association to link the new document to the old.  The registry adaptor takes responsibility for deprecating the old document for the XFRM_RPLC (replace with transform) type. More specifically, the following must be composed in a submission:
* Submission Set
* New Document Metadata
* A HasMember Association linking Submission Set to the XDSDocumentEntry
* APND, XFRM, or XFRM_RPLC Association linking the new document to the existing document (in registry, discovered by query) being replaced 
* An ObjectRef pointing to the document being replaced
There must also be a single document included in the submission as an attachment.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Source

'''Dependencies'''
: Must be able to run [[XDS_Test_Kit_2005-2006_Test_Descriptions#11807 | 11807]] - GetDocument query (or equivalent).

'''Testing Document Source Actor'''
# Allocate new patient IDs as needed (see [[#Allocating_new_Patient_IDs_for_Testing]])
# Rerun test [[XDS_Test_Kit_2005-2006_Test_Descriptions#11746 | 11746]] with a new patientId for this test. This creates a document to be manipulated via life-cycle management.
# Use the GetDocument query ( test [[XDS_Test_Kit_2005-2006_Test_Descriptions#11807 | 11807]]), retrieve the UUID of the document just submitted by 11746
# Compose metadata to perform the replacement.  An example can be found in 11752/metadata.xml
#* Set the patientId on the Submission Set and document
#* Add an APND Association linking the new document to the one discovered via query.
#** Set the targetObject attribute on the APND Association object to the UUID of the document submitted by 11746
#** Add an ObjectRef for the UUID of the document to indicate that an object already in the registry is being referenced
# Configure the Document Source under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/repository</nowiki>
# Have your Document Source send the metadata and the APND document
# Verify that you get a successful RegistryResponse message in return
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]



== 11751 ==

'''Accept two documents via XDS.a'''

Verify that the XDS.a Document Repository can accept a submission containing [[Metadata_Patterns#Submission_Set_containing_two_Documents|two documents]] via the [[XDS_Transactions#Provide_and_Register_Document_Set-a|Provide and Register Document Set-a]] transaction and forward the updated metadata to the Public Registry.

'''References'''
: ITI TF-2 3.15
: ITI TF-2 3.14

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Resources'''
: tests/11751 section of test kit which contains ''submit'' and ''eval'' sub-directories

'''Testing Document Repository Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_Two_Documents|Submission Set containing two Documents]] using the [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction to your Repository. Your Repository forwards the metadata on to the Public Registry via the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction

# Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/registryA2doc</nowiki>
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Repository
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to query and evaluate your Repository's submission to the Public Registry
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''eval'' parts of the test

'''Evaluation''' by the Public Registry
# [[#Schema|Schema]]
# [[#Metadata_Validator|Metadata Validator]]
# Correct content ([[Metadata_Patterns#Submission_Set_containing_Two_Documents|Submission Set containing two Documents]])
# Correct hash and size computed by Repository actor and placed in metadata.

'''Evaluation''' by xdstest2
# Evaluation query returns correct metadata

==  11763 == 

'''Submit Example HL7 Lab'''

Submit an example of your HL7 Lab message for review.

'''References'''
: None

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''Testing Document Consumer Source'''
# Submit, as a log entry, an example of your HL7 Lab

==  11764 == 

'''Submit Example PDF'''

Submit an example of your PDF Document  for review.

'''References'''
: None

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''Testing Document Consumer Source'''
# Submit, as a log, an example of your PDF document for review.

==  11765 == 

'''Submit Example Wrapped PDF'''

Submit an example of your PDF Document wrapped in a CDA R2 wrapper for review.

'''References'''
: None

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''Testing Document Consumer Source'''
# Submit example document as a log to this test

==  11766 == 

'''Submit Example XDS-MS/CDA R2'''

Submit an example of your XDS-MS/CDA R2 for review.

'''References'''
: None

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''Testing Document Consumer Source'''
# Submit your example as a log for this test.

==  11801 == 

'''Query for ObjectRefs'''

Verify that Document Consumer can query the Registry for ObjectRefs and that a Document Registry can service such a query.

Why does this exist? Any potential document listing can be very long.  To use LeafClass queries to generate listing pages (pick lists) would be very slow as this requires the Registry to assemble metadata XML for each document. Starting with an ObjectRef query that returns just the list of identifiers for each document can be used to generate 'page at a time' listing.  For each page, a full LeafClass query can be issued to get the content for display. 11801 (and 11802) are intended for debug usage only.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: Test [[#11870]] must be run before this test. It loads necessary test data.

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer send the query in test/11801/query.xml.
# Verify that you get a successful RegistryResponse message in return containing 1 ObjectRef.
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit test/11801/test.properties
# Change the URL parameter to point to your registry.
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

==  11802 == 

'''Query for LeafClass'''

Verify that Document Consumer can query the Registry for LeafClass and that a Document Registry can service such a query. This is intended for debug purposes only.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: Test 11870 must be run before this test

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer send the query in test/11802/query.xml.
# Verify that you get a successful RegistryResponse message in return containing 1 ExtrinsicObject.
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit test/11802/test.properties
# Change the URL parameter to point to your registry.
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

== 11803 ==

'''FindDocuments Query'''

Verify that Document Consumer can use the FindDocuments query and that a Document Registry can service such a query.

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test 11870 must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the query in 
#* 11803/find_documents.xml.

# Verify that you get successful RegistryResponse messages in return containing ExtrinsicObject(s).
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit the test.properties file in 11803.
#* Change the URL parameter to point to your registry.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return containing ExtrinsicObject(s)
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

== 11804 ==

'''FindSubmissionSets Query'''

Verify that Document Consumer can use the FindSubmissionSets query and that a Document Registry can service such a query.

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test 11870 must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the query in 
#* 11804/find_submission_sets.xml.

# Verify that you get successful RegistryResponse messages in return containing RegistryPackages(s).
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit the test.properties file in 11804.
#* Change the URL parameter to point to your registry.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return containing RegistryPackages(s)
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]


== 11805 ==

'''FindFolders Query'''

Verify that Document Consumer can use the FindFolders query and that a Document Registry can service such a query.

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test 11870 must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the query in 
#* 11805/find_folders.xml.

# Verify that you get successful RegistryResponse messages in return containing RegistryPackages(s).
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit the test.properties file in 11805.
#* Change the URL parameter to point to your registry.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return containing RegistryPackages(s)
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

==  11806 == 

'''GetAll Query'''

Verify that Document Consumer can use the GetAll query and that a Document Registry can service such a query.

To run efficiently, this query must be broken down into 3 queries:
# Query for ExtrinsicObjects (XDSDocumentEntry)
# Query for RegistryPackages (XDSSubmissionSet and XDSFolder)
# Query for Associations linking the objects

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test 11870 must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the queries in 
#* 11806a/get_all_1.xml.
#* 11806b/get_all_2.xml.
#* 11806c/get_all_3.xml.
# Verify that you get successful RegistryResponse messages in return containing, in total, 1 ExtrinsicObject, 1 Submission Set, and 1 Association.
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit the test.properties file in 11806a 11806b and 11806c.
#* Change the URL parameter to point to your registry.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return containing, in total, 1 ExtrinsicObject, 1 Submission Set, and 1 Association.
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

==  11807 == 

'''GetDocument Query'''

Verify that Document Consumer can use the GetDocument query and that a Document Registry can service such a query.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test [[#11870]] must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer send the query in test/11807/query_by_uniqueid.xml.
# Verify that you get a successful RegistryResponse message in return containing 1 ExtrinsicObject.
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit test/11807/test.properties
# Change the URL parameter to point to your registry.
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

==  11808 == 

'''GetSubmissionSetContents Query'''


Verify that Document Consumer can use the GetSubmissionSetContents query and that a Document Registry can service such a query.

This query allows the Document Consumer to specify the documents by UUID (native to Registry standard) or uniqueId (native to health care environment).  This Query test offers opportunity to test either.

To run efficiently, this query must be broken down into 3 queries:
# Query for XDSSubmissionSet
# Query for Documents
# Query for XDSFolders

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test 11870 must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the queries in 
#* uuid/11808a/get_submission_set_contents_1.xml
#* uuid/11808b/get_submission_set_contents_2.xml
#* uuid/11808c/get_submission_set_contents_3.xml
To use these queries, the parameter $uniqueId must be changed to a real value

AND

* uniqueId/11808a/get_submission_set_contents_1.xml
* uniqueId/11808b/get_submission_set_contents_2.xml
* uniqueId/11808c/get_submission_set_contents_3.xml
To use these queries, the parameter $uuid must be changed to a real value

# Verify that you get successful RegistryResponse messages in return
# containing XDSSubmissionSet, Document and XDSFolder.
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit the test.properties file in 11808a 11808b and 11808c.
#* Change the URL parameter to point to your registry.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return
# containing XDSSubmissionSet, Document and XDSFolder.
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

==  11809 == 

'''GetFolderContents Query'''


Verify that Document Consumer can use the GetFolderContents query and that a Document Registry can service such a query.

To run efficiently, this query must be broken down into 3 queries:
# Query for XDSFolder
# Query for XDSSubmissionSet
# Query for Documents

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test 11870 must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the queries in 
#* uuid/11809a/get_folder_contents_1.xml
#* uuid/11809b/get_folder_contents_2.xml
#* uuid/11809c/get_folder_contents_3.xml

AND

* uniqueId/11809a/get_folder_contents_1.xml
* uniqueId/11809b/get_folder_contents_2.xml
* uniqueId/11809c/get_folder_contents_3.xml

# Verify that you get successful RegistryResponse messages in return
# containing XDSSubmissionSet, Document and XDSFolder.
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit the test.properties file in 11809a 11809b and 11809c.
#* Change the URL parameter to point to your registry.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return
# containing XDSSubmissionSet, Document and XDSFolder.
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]


==  11810 == 

'''GetFoldersForDocument Query'''


Verify that Document Consumer can use the GetFolderForDocument query and that a Document Registry can service such a query.

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test 11870 must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the query in 
#* uuid/11810/get_folders_for_document.xml

AND

* uniqueId/11810/get_folders_for_document.xml

# Verify that you get successful RegistryResponse messages in return
# containing XDSFolder(s).
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit the test.properties file in 11810.
#* Change the URL parameter to point to your registry.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return
# containing XDSFolder(s).
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]


==  11811 == 

'''GetAddendums Query'''


Verify that Document Consumer can use the GetAddendums query and that a Document Registry can service such a query.

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test 11870 must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the query in 
#* uuid/11811/get_addendums.xml

AND

* uniqueId/11811/get_addendums.xml

# Verify that you get successful RegistryResponse messages in return
# containing ExtrinsicObject(s).
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit the test.properties file in 11811.
#* Change the URL parameter to point to your registry.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return
# containing ExtrinsicObject(s).
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]



==  11812 == 

'''GetHistory Query'''


Verify that Document Consumer can use the GetHistory query and that a Document Registry can service such a query.

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test 11870 must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the query in 
* uuid/11812/get_history.xml

AND

* uniqueId/11812/get_history.xml

# Verify that you get successful RegistryResponse messages in return
# containing ExtrinsicObject(s).
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit the test.properties file in 11812.
#* Change the URL parameter to point to your registry.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return
# containing ExtrinsicObject(s).
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

==  11813 == 

'''GetTransformations Query'''


Verify that Document Consumer can use the GetTransformations query and that a Document Registry can service such a query.

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: When testing Document Registry actor, test 11870 must be run before this test to establish test data

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the query in 
* uuid/11813/get_transformations.xml

AND

* uniqueId/11813/get_transformations.xml

# Verify that you get successful RegistryResponse messages in return
# containing ExtrinsicObject(s).
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit the test.properties file in 11813.
#* Change the URL parameter to point to your registry.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return
# containing ExtrinsicObject(s).
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]


==  11814 == 

'''Basic Transport'''

Test basic transport mechanisms, HTTP and SOAP, for transferring metadata without mutual TLS authentication. Document Consumer makes an HTTP connection to Document Registry. A simple SOAP package is transferred containing simple non-metadata XML. The Registry may return an error message because the payload is not metadata. This is acceptable.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Testing Document Consumer Actor'''
# Configure the Document Source under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/test?testid=11814</nowiki>
# Have your Document Source send a SOAP over HTTP message with arbitrary content
# Verify that you get a valid SOAP message back, it may contain an error message from the repository. If you using a SOAP parser, errors in parsing are likely.  This test is intended to support folks using simpler tools.  The parsing error is acceptable.
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Repository Actor'''
# Edit test/11814/test.properties
# Change the URL parameter to point to your repository
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]]
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

==  11827 == 

'''Accept One Document via XDS.a'''

Verify that the XDS.a Document Repository can accept a SOAP with Attachments message containing metadata representing a Submission Set and a single document. The content of the document are include as an attachment to the message according to the SOAP with Attachments standard. Specifically, the metadata shall be augmented with the following attributes to match the included document:
* XDSDocumentEntry.size
* XDSDocumentEntry.hash
* XDSDocumentEntry.URI
and then forwarded on to the Public Registry in a XDS.a Register transaction. These attributes must be calculated and added correctly. The URI installed into XDSDocumentEntry.URI need not be publicly available on the Internet. See tests/11733 for an example of how to add these metadata attributes.

'''Warning: some testers have run the utility unix2dos on the entire test kit and it will break this test.  The file attachment, my_document.txt, when modified by this utility will no longer match in size or hash.'''

'''References'''
: ITI TF-2 3.14
: ITI TF-2 3.15

'''Actors Tested'''
: XDS.a Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Resources'''
: tests/11827 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, ''submit'' and ''eval''
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Repository Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction to your XDS.a Repository. Your Repository forwards the metadata on to the Public Registry via the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction
# Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/test11827</nowiki>
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Repository
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to query and evaluate your Repository's submission to the Public Registry
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''eval'' parts of the test

'''Evaluation''' by the Public Registry
# [[#Schema|Schema]]
# [[#Metadata_Validator|Metadata Validator]]
# Correct content ([[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]])
# Correct hash and size computed by Repository actor and placed in metadata.


'''Evaluation''' by xdstest2
# Evaluation query returns correct metadata

==  11870 == 

'''Load test data set 1'''

Load test data into Registry to support query testing. 

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: None

'''Dependencies'''
: None

'''Testing Document Registry Actor'''
# Edit testdatga/11870/test.properties
# Change the URL parameter to point to your registry
# Edit testdata/11870/metadata.xml
#* Change $PatientId to a real patient ID globally
#* Change all uniqueIds (start with $uniqueId) to real uniqueIDs in your system
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Log the results: no logging required

This submission contains a single Submission Set, 3 Documents, and Associations to make the documents part of the Submission Set.

== 11871 ==

'''Accept Document Replace via XDS.a'''

Verify that the XDS.a Document Registry can accept a [[Metadata_Patterns#Document_Replace|Document Replace]] via the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction.  No transformations or addendum are present.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''

'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Document_Replace|Document Replace]] using the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry. This will submit a submission set containing a single document. This document will be the target of the replace operation in the next step.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''rplc'' sub-directory to perform the replacement. This will submit a submission set containing a single document, the replacement document, and the RPLC association which will trigger the registry to deprecate the original document (submitted in the last step).
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry. This step has two parts.  First a test step named validate_deprecate will test that the orginal document is deprecated.  The second test step, validate_new, will test that the replacement document is present.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml files from the ''submit'', ''rplc'', and ''eval'' parts of the test.

'''Evaluation'''
# Submit, rplc, eval steps must be successful
# Within the eval step, the validate_deprecate test step must show that the original document is deprecated and the validate_new must show that the replacement document is approved (status = Approved).

== 11873 ==

'''Accept Document Addendum via XDS.a'''

Verify that the XDS.a Document Registry can accept a [[Metadata_Patterns#Document_Addendum|Document Addendum]] via the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Document_Addendum|Document Addendum]] using the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query. An overview of this test is:
* Submit a submission set containing a single document.  Do this twice.
* Replace (issue RPLC) for one of the documents
* Attempt addendum on both original documents.  Creating an addendum on the replaced document must fail. Creating an addendum on the non-replaced document must succeed.
* Issue GetSubmissionSetandContents Stored Query on both addendum attempts. The plain addendum must succeed and the one involving the replace must fail. In this case succeed and fail simply refers to whether content is returned and not the status on the Stored Query.

The detailed steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry. 
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''rplc'' sub-directory to perform the replacement. 
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''apnd'' sub-directory to perform the addendum.  
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml files from the ''submit'', ''rplc'', ''apnd'', and ''eval'' parts of the test.

== 11874 ==

'''Accept Document Transformation via XDS.a'''

Verify that the XDS.a Document Registry can accept a [[Metadata_Patterns#Document_Transformation|Document Transformation]] via the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Document_Transformation|Document Transformation]] using the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query. An overview of this test is:
* Submit a submission set containing a single document.  Do this twice.
* Replace (issue RPLC) for one of the documents
* Attempt transformation on both original documents.  Creating a transformation on the replaced document must fail. Creating a transformation on the non-replaced document must succeed.
* Issue GetSubmissionSetandContents Stored Query on both transformation attempts. The plain transformation must succeed and the one involving the replace must fail. In this case succeed and fail simply refers to whether content is returned and not the status on the Stored Query.

The detailed steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry. 
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''rplc'' sub-directory to perform the replacement. 
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''xfrm'' sub-directory to perform the transformation.  
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml files from the ''submit'', ''rplc'', ''xfrm'', and ''eval'' parts of the test.

== 11875 ==

'''Accept Document Transform/Replace via XDS.a'''

Verify that the XDS.a Document Registry can accept a [[Metadata_Patterns#Document_Transform_Replace|Document Transform Replace]] via the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction.  No transformations or addendum are present.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''

'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Document_Replace|Document Replace]] using the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry. This will submit a submission set containing a single document. This document will be the target of the replace operation in the next step.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''rplc'' sub-directory to perform the replacement. This will submit a submission set containing a single document, the transformation/replacement document, and the XFRM_RPLC association which will trigger the registry to deprecate the original document (submitted in the last step).
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry. This step has two parts.  First a test step named validate_deprecate will test that the orginal document is deprecated.  The second test step, validate_new, will test that the replacement document is present.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml files from the ''submit'', ''rplc'', and ''eval'' parts of the test.

'''Evaluation'''
# Submit, rplc, eval steps must be successful
# Within the eval step, the validate_deprecate test step must show that the original document is deprecated and the validate_new must show that the replacement document is approved (status = Approved).

== 11876 ==

'''Reject Submission of Invalid Patient ID via XDS.a'''

This test allows an implementation of the Document Registry actor to show that it rejects submissions of documents that are registered to patients whose patient ID has not been received through the Patient Identity Feed transaction. 

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Resources'''
: tests/11876 section of [[XDS_Test_Kit_Download|test kit]]


'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction to your Registry. The registry must reject the submission giving the '''XDSUnknownPatientId''' error code
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan. The testplan already includes an unlikely Patient Id.  If that Patient Id is registered in your system change the Patient Id to one that is not registered.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file showing the failure.  The testplan is configured so that a failure on the submission yields a successful status on the test.

== 11877 ==

'''Reject Submission Set, Patient ID does not match Document (XDS.a)'''

This test allows an implementation of the Document Registry actor to show that it rejects submissions where the Submission Set and Document have different Patient IDs. 

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Resources'''
: tests/11877 section of [[XDS_Test_Kit_Download|test kit]]


'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction to your Registry. The metadata provided has different Patient IDs in the Submission Set and the Document metadata. The registry must reject the submission giving the '''XDSPatientIdDoesNotMatch''' error code. You may change the Patient IDs coded if that makes the test easier as long as they are different.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' directory. This proves that the correct error message was returned.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' directory. This proves that the metadata was not stored.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. Return the log.xml file from both the ''submit'' and ''eval'' directories.  The testplans are configured so that a failure on the submission yields a successful status on the test and finding no documents in the query yields successful test results.

==  11878 == 

'''Reject Submission, Patient ID on Replacement Document does not match Original'''

This test allows an implementation of the Document Registry actor to show that it rejects submissions of replacement documents where the patient ID of the replacement document does not match the patient ID of the original document. 

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''Testing Document Registry Actor'''
# In the first submission (submit part), a simple document submission is sent
# In the second submission, (rplc part) a different Patient Id is set into the metadata via the automatic Patient ID allocation service.
# In the third submission (eval part), Stored Queries are used to verify the results of the above steps.  The results of submit must be present in the registry and there must be no evidence of the rplc.
# Each of these steps are submitted via a Register Transaction to your Document Registry actor using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].  
# Log the results showing the error message returned via [[#Log_Results_of_Register_transaction_against_your_Registry]]. This must be run twice, once for each of the two patientIds

==  11879 == 

'''Accept Create Folder'''

Verify that the XDS.a Document Registry can accept the submission of a Folder.    

This submission consists of:
* an XDSSubmissionSet object
* an XDSFolder object
* an HasMember Association object linking the Submission Set to the Folder

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Your registry must support the GetSubmissionSetAndContents Stored Query to pass the evaluation step of this test

'''You will need to'''
: None

'''Resources'''
: tests/11879 section of [[XDS_Test_Kit_Download|test kit]]

'''Testing Document Registry Actor'''
An overview of this test is:
* Submit a folder within a submission set to document registry
* Issue GetSubmissionSetAndContents to verify content in registry

The test steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from both the ''submit'' and ''eval'' parts of the test.

==  11880 == 

'''Accept Create Folder with Initial Document'''

Verify that the XDS.a Document Registry can accept the submission of a Folder with a document.    

This submission consists of:
* an XDSSubmissionSet object
* an XDSFolder object
* a HasMember Association object linking the Submission Set to the Folder
* a Document object
* a HasMember Association object linking the Folder to the Document

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Your registry must support the GetSubmissionSetAndContents and GetFolderAndContents Stored Queries to pass the evaluation step of this test

'''You will need to'''
: None

'''Resources'''
: tests/11880 section of [[XDS_Test_Kit_Download|test kit]]

'''Testing Document Registry Actor'''
An overview of this test is:
* Submit above described metadata
* Issue GetSubmissionSetAndContents to verify content in registry

The test steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from both the ''submit'' and ''eval'' parts of the test.

==  11881 == 

'''Accept Add New Document to Folder'''

Verify that the XDS.a Document Registry can accept a submission that contains a document which is added to an existing folder.    

This submission consists of:
* an XDSSubmissionSet object
* an XDSDocumentEntry object
* an HasMember Association linking the Submission Set to the Document
* an HasMember Association linking an existing Folder to this new Document

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Your registry must support the GetFolderAndContents Stored Query to pass the evaluation step of this test

'''You will need to'''
: None

'''Resources'''
: tests/11881 section of [[XDS_Test_Kit_Download|test kit]]

'''Testing Document Registry Actor'''
An overview of this test is:
* Submit an empty folder
* Submit a document with the association to link it to the folder
* Issue GetFolderandContents Stored Query to verify contents of Registry

The test steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''create_folder'' sub-directory to perform the submission to your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''add_to_folder'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from the ''create_folder'', ''add_to_folder'' and ''eval'' parts of the test.

==  11882 == 

'''Reject Add Document to Folder - Patient ID does not match'''

Verify that the XDS.a Document Registry will reject a submission that contains a document which is added to an existing folder with a different Patient ID.    

This submission consists of:
* an XDSSubmissionSet object
* an XDSDocumentEntry object
* an HasMember Association linking the Submission Set to the Document
* an HasMember Association linking an existing Folder to this new Document

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Your registry must support the GetFolderAndContents Stored Query to pass the evaluation step of this test

'''You will need to'''
: None

'''Resources'''
: tests/11882 section of [[XDS_Test_Kit_Download|test kit]]

'''Testing Document Registry Actor'''
An overview of this test is:
* Submit an empty folder
* Submit a document with the association to link it to the folder. The Patient ID on the Document does not match that on the Folder.
* Issue GetFolderandContents Stored Query to verify contents of Registry. The Document must not be a member of the Folder.

The test steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''create_folder'' sub-directory to perform the submission to your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''add_to_folder'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from the ''create_folder'', ''add_to_folder'' and ''eval'' parts of the test.

== 11883 == 

'''Submission Stored - All or Nothing (XDS.a)'''

A submission including a Submission Set and two documents is submitted to the Registry.  One of the two documents is missing the URI attribute and will therefore cause an error.  A stored query is then used to verify that no Submission Set nor documents are stored in the registry with status Approved.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: XDS.a Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Resources'''
: tests/11883 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, ''submit'' and ''eval''


'''Testing Document Registry Actor'''


# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry. An error is expected.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to query and evaluate your Registry's contents. 
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''eval'' parts of the test


'''Evaluation''' by xdstest2
# The xdstest2 tool will verify that:
: the submission failed 
: the query returns no Submission Set or Documents

==  11884 == 

'''Accept Add By-Reference to Submission Set'''

This tests a Document Registry actor's ability to accept add a document to a submission set by-reference.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''Testing Document Registry Actor'''
# Allocate a new patient ID 
# Make any initial submission which includes a Submission Set, test [[#11731]] is a possibility
# Submit to your Document Registry actor implementation via [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]]
# For the next submission, use tests/11884, with different patient ID from first submission.
# Submit to your Document Registry actor implementation via [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]]
# Verify that you get a successful RegistryResponse message in return
# Log the results: [[#Log_Results_of_Register_transaction_against_your_Registry]]. This must be run twice, once for each patient ID

==  11885 == 

'''Reject Duplicate Document uniqueID with Different Hash (XDS.a)'''

Verify that the XDS.a Document Registry will 
: accept a duplicate XDSDocumentEntry, same XDSDocumentEntry.uniqueId, if the XDSDocumentEntry.hash is the same
: reject if the hash is different

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: XDS.a Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Resources'''
: tests/11885 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, ''submit'' and ''eval''
: tests/11885/readme.txt which provides descriptions of the individual test steps


'''Testing Document Registry Actor'''


# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to query and evaluate your Registry's contents
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''eval'' parts of the test


'''Evaluation''' by xdstest2
# The xdstest2 tool will evaluate that the proper error message is returned from each test step.

==  11886 == 

'''Pass Arbitrary Metadata'''

A Document Repository actor must be able to pass arbitrary metadata from the Document Source to the Document Registry. The only metadata modifications made by a Document Repository is to annotate XDSDocumentEntry objects with size, hash, and URI information.

This tests sends a collection of metadata artifacts through the Repository to the Registry. There they will be verified as complete and unaltered.


'''References'''
: ITI TF-2 3.14
: ITI TF-2 3.15

'''Actors Tested'''
: Document Repository

'''Testing Document Repository Actor'''
# Start with the test data in tests/11886 
# Allocate a new patient ID and uniqueIDs (see [[#Using_the_Public_Registry]])
# Edit these values into the test submission (see [[#Patient_IDs_and_uniqueIds_in_test_material]])
# Edit the file test.properties to point to your repository and to show the correct patient ID
# Configure your Document Repository so that the subsequent Register Transaction is sent to the Public Registry.
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse message in return.
# Log the results: [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository]]

== 11887 ==

'''Return Errors from Registry (XDS.a)'''

This test demonstrates that a Document Repository returns errors from the Document Registry back to the Document Source. This test is a repeat of test 11877 which tests that a Registry rejects unknown Patient IDs. The Repository under test points to the Public Registry which generates the original error.  The responsibility of the Repository is to return the errors to the Document Source.

'''References'''
: ITI TF-2 3.14, 3.15

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: None

'''You will need to'''
: Run this after test 11877

'''Resources'''
: tests/11887 section of [[XDS_Test_Kit_Download|test kit]]


'''Testing Document Repository Actor'''
# Configure your Repository to forward metadata to the Public Registry at <nowiki>http://129.6.24.109:9080/axis2/services/xdsregistrya</nowiki>
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan. Xdstest2 validates that the correct error code is returned.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. Return the log.xml file.

== Query - Configuring the SQL queries supplied in the testkit ==

The SQL queries supplied with the test kit (tests 11910 - 11922) have extra information in the metadata.xml file that must be edited out before using. To edit:

# Decide what optional parameters to the query you want to use
#* The file contains psuedo-comments starting with the pound character (#) and ending with end-of-line.
#* A comment containing the name of an optional parameter indicates that that line is necessary in the query if that optional parameter is used. An example of an optional parameter name is $XDSDocumentEntryConfidentialityCode.
# Delete all lines containing comments which contain parameter names you do not wish to be in your query (filter out unwanted parameters)
# Delete the remaining comments (not the line, just the comment part)
# You should be left with SQL imbedded in XML. This SQL will still contain parameter names embedded in the SQL statements
# Subtitute your values for the parameter names

== Query - Testing the Document Registry ==
This test procedure is used for all Queries.

Verify that a Document Registry can service each query type.

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test 11870 must be run before this test to establish test data

'''Testing Document Registry Actor'''
# Edit the test.properties file in the appropriate directory in tests/ (directory is test number).
#* Change the URL parameter to point to your registry.
# Configure the SQL (in metadata.xml in the test directory) to include only the query parameters you need to use.  See [[#Query - Configuring the SQL queries supplied in the testkit]] for instructions.
# Run the tests using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Verify that you get a successful RegistryResponse messages in return containing ExtrinsicObject(s)
# Log the results: [[#Log_Results_of_Query_or_Stored_Query_transaction_against_your_Registry]]

== Query - Testing the Document Consumer ==

Verify that Document Consumer can use the Query facility.

'''References'''
: ITI TF-2 3.16

'''Actors Tested'''
: Document Consumer

'''Dependencies'''
: None

'''Testing Document Consumer Actor'''
# When building your Document Consumer, you may reference the SQL provided in the test kit. You will need to configure the SQL (in metadata.xml in the test directory) to include only the query parameters you need to use.  See [[#Query - Configuring the SQL queries supplied in the testkit]] for instructions.
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/query</nowiki>
# Have your Document Consumer issue the Query. Examples are found in tests/ by the test number 
# Log the results: [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry]]

==  Stored Query - Testing the Document Registry == 

The testing of all Stored Queries follows the same instructions.

'''References'''
: ITI TF-2 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: test [[#11870]] - load test data set 1
: test [[#11910]] - load test data set 2
: test [[#11890]] - load test data set 3 (Folders)

'''Testing Document Registry Actor'''
# Identify the directory in the test kit that supports the query of interest.  As an example, test 11900 (GetAll query) can be found in directory tests/11900.
# Edit the file test.properties to point to your Registry by editing the value of the <b>url</b> property.
# Execute the test by running [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]] in that directory
# Report the results using the directions at [[#Log Results of Register transaction against your Registry]]

Note that tests 11897 (FindDocuments) and 11898 (FindSubmissionSets) each have multiple parts (identified by sub-directory parta, partb, etc). 11897 has 3 parts and 11898 has 2 parts. For these two tests, each part must be tested against your registry and reported.

==  Stored Query - Testing the Document Consumer == 

The testing of all Stored Queries follows the same instructions.

'''References'''
: ITI TF-2 3.18

'''Actors Tested'''
: Document Consumer

'''Dependencies'''
: none

'''Testing Document Consumer Actor'''
# Execute stored query against Public Registry.
# Report your results following the instructions at [[# Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry]]

See [[#Stored Query - Testing the Document Registry]] for details on test data.

==  11890 == 

'''Load test data set 3'''

Load test data into Registry to support query testing. 

'''References'''
: ITI TF-2 3.14
: ITI TF-2 3.42


'''Actors Tested'''
: None

'''Dependencies'''
: None

'''You will need to'''
: Allocate a new Patient ID for this submission

'''Resources'''
: testdata/11890 section of [[XDS Test Kit Download|test kit]]

'''Testing Document Registry Actor'''
# Edit testdata/11890/testplan.xml 
#* Change the <RegistryEndpoint> element to reference an endpoint on your registry that will accept a Register transaction (.a or .b)
#* If this EndPoint requires XDS.a formatted metadata then edit testplan.xml and change all instances of <XDSb/> to <XDSa/>
#* Edit the <PatientId> element to reference a Patient Id not previously used in this Registry. Other metadata registered against this Patient Id will foul the expected statistics for the resulting Stored Query tests.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.

The results of this test should not be logged in Kudu.

== 11897 == 
'''FindDocuments Stored Query'''

Test a Document Registry's implementation of the FindDocuments Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the FindDocuments Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11897 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, SOAP11 and SOAP12, which generate SOAP version 1.1 or SOAP version 1.2 requests. Use the one that matches your implementation.
: tests/11897/readme.txt which documents the purpose of the individual test steps.


'''Testing FindDocuments Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  Within this test plan file are 25 test steps.  Each test step focuses on a different aspect of the FindDocuments Stored Query.  The file readme.txt in this directory documents the individual steps.  Remember that running xdstest2 in this directory will execute all test steps.  Running xdstest2 <step name> will run only that individual test step.
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

== 11898 == 
'''FindSubmissionSets Stored Query'''

Test a Document Registry's implementation of the FindSubmissionSets Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the FindSubmissionSets Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11898 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, SOAP11 and SOAP12, which generate SOAP version 1.1 or SOAP version 1.2 requests. Use the one that matches your implementation.
: tests/11898/readme.txt which documents the purpose of the individual test steps.


'''Testing FindSubmissionSets Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  Within this test plan file are 11 test steps.  Each test step focuses on a different aspect of the FindSubmissionSets Stored Query.  The file readme.txt in this directory documents the individual steps.  Remember that running xdstest2 in this directory will execute all test steps.  Running xdstest2 <step name> will run only that individual test step.
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

== 11901 == 
'''GetDocuments Stored Query'''

Test a Document Registry's implementation of the GetDocuments Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the GetDocuments Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11901 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, SOAP11 and SOAP12, which generate SOAP version 1.1 or SOAP version 1.2 requests. Use the one that matches your implementation.
: tests/11901/readme.txt which documents the purpose of the individual test steps.


'''Testing GetDocuments Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  Within this test plan file are 4 test steps.  Each test step focuses on a different aspect of the GetDocuments Stored Query.  The file readme.txt in this directory documents the individual steps.  Remember that running xdstest2 in this directory will execute all test steps.  Running xdstest2 <step name> will run only that individual test step.
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

== 11902 == 
'''GetFolders Stored Query'''

Test a Document Registry's implementation of the GetFolders Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the GetFolders Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11902 section of [[XDS_Test_Kit_Download|test kit]]

'''Overview of the test steps contained in the test plan'''

* uniqueid - query by uniqueid
* uuid - query by uuid

'''Testing GetFolders Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

== 11903 == 
'''GetAssociations Stored Query'''

Test a Document Registry's implementation of the GetAssociations Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the GetAssociations Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11903 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, SOAP11 and SOAP12, which generate SOAP version 1.1 or SOAP version 1.2 requests. Use the one that matches your implementation.
: tests/11903/readme.txt which documents the purpose of the individual test steps.


'''Testing GetAssociations Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  Within this test plan file are 3 test steps.  Each test step focuses on a different aspect of the GetAssociations Stored Query.  The file readme.txt in this directory documents the individual steps.  Remember that running xdstest2 in this directory will execute all test steps.  Running xdstest2 <step name> will run only that individual test step.
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

== 11904 == 
'''GetDocumentsAndAssociations Stored Query'''

Test a Document Registry's implementation of the GetDocumentsAndAssociations Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the GetDocumentsAndAssociations Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11904 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, SOAP11 and SOAP12, which generate SOAP version 1.1 or SOAP version 1.2 requests. Use the one that matches your implementation.
: tests/11904/readme.txt which documents the purpose of the individual test steps.


'''Testing GetDocumentsAndAssociations Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  Within this test plan file are 4 test steps.  Each test step focuses on a different aspect of the GetDocumentsAndAssociations Stored Query.  The file readme.txt in this directory documents the individual steps.  Remember that running xdstest2 in this directory will execute all test steps.  Running xdstest2 <step name> will run only that individual test step.
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

== 11905 == 
'''GetSubmissionSets Stored Query'''

Test a Document Registry's implementation of the GetSubmissionSets Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the GetSubmissionSets Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11905 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, SOAP11 and SOAP12, which generate SOAP version 1.1 or SOAP version 1.2 requests. Use the one that matches your implementation.
: tests/11905/readme.txt which documents the purpose of the individual test steps.


'''Testing GetSubmissionSets Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  Within this test plan file are 5 test steps.  Each test step focuses on a different aspect of the GetSubmissionSets Stored Query.  The file readme.txt in this directory documents the individual steps.  Remember that running xdstest2 in this directory will execute all test steps.  Running xdstest2 <step name> will run only that individual test step.
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

== 11906 == 
'''GetSubmissionSetAndContents Stored Query'''

Test a Document Registry's implementation of the GetSubmissionSetAndContents Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the GetSubmissionSetAndContents Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11906 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, SOAP11 and SOAP12, which generate SOAP version 1.1 or SOAP version 1.2 requests. Use the one that matches your implementation.
: tests/11906/readme.txt which documents the purpose of the individual test steps.


'''Testing GetSubmissionSetAndContents Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  Within this test plan file are 5 test steps.  Each test step focuses on a different aspect of the GetSubmissionSetAndContents Stored Query.  The file readme.txt in this directory documents the individual steps.  Remember that running xdstest2 in this directory will execute all test steps.  Running xdstest2 <step name> will run only that individual test step.
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

== 11907 == 
'''GetFolderAndContents Stored Query'''

Test a Document Registry's implementation of the GetFolderAndContents Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the GetFolderAndContents Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11907 section of [[XDS_Test_Kit_Download|test kit]]

'''Overview of the test steps contained in the test plan'''

* uniqueid - query by uniqueid
* uuid - query by uuid
* conf_code - query by uuid with filter on confidentiality code
* both_conf_code - query by uuid with multi-value filter on confidentiality code
* format_code - query by uuid with filter on format code

'''Testing GetFolderAndContents Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

== 11908 == 
'''GetFoldersForDocument Stored Query'''

Test a Document Registry's implementation of the GetFoldersForDocument Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the GetFoldersForDocument Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11908 section of [[XDS_Test_Kit_Download|test kit]]


'''Testing GetSubmissionSetAndContents Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  Within this test plan file are 2 test steps.  Each test step focuses on a different aspect of the GetFoldersForDocument Stored Query.  The file readme.txt in this directory documents the individual steps.  Remember that running xdstest2 in this directory will execute all test steps.  Running xdstest2 <step name> will run only that individual test step.
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

== 11909 == 
'''GetRelatedDocuments Stored Query'''

Test a Document Registry's implementation of the GetRelatedDocuments Stored Query.

This test has multiple parts where each part focuses on one or a collection of the parameters to the GetRelatedDocuments Stored Query.

'''References'''
: ITI TF-4 3.18

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Test [[#11890|11890]] must be run before this test to establish the test data in your registry

'''Resources'''
: tests/11909 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, SOAP11 and SOAP12, which generate SOAP version 1.1 or SOAP version 1.2 requests. Use the one that matches your implementation.
: tests/11909/readme.txt which documents the purpose of the individual test steps.


'''Testing GetRelatedDocuments Stored Query'''
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan.  Within this test plan file are 6 test steps.  Each test step focuses on a different aspect of the GetRelatedDocuments Stored Query.  The file readme.txt in this directory documents the individual steps.  Remember that running xdstest2 in this directory will execute all test steps.  Running xdstest2 <step name> will run only that individual test step.
# All test steps must execute successfully.
# [[#Log Results of Query or Stored Query transaction against your Registry|Log the results]]

==  11951 == 

'''Load test data set 2'''

Load test data into Registry to support query testing. 

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: None

'''Dependencies'''
: None

'''Testing Document Registry Actor'''
# Edit testdata/11951/test.properties
# Change the URL parameter to point to your registry
# Edit testdata/11951/metadata.xml
#* Change $PatientId to a real patient ID globally
#* Change all uniqueIds (start with $uniqueId) to real uniqueIDs in your system
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Log the results: no logging required

This submission contains a single Submission Set, 1 Document, and Association to make the document part of the Submission Set.

== 11952 ==

Submit a Consent Document referencing a patientID and one or more Policy OIDs.

Tests Document Source

== 11953 ==

Submit a Clinical Document which references an existing Consent Document.

Tests Document Source

== 11954 == 

Query for a Consent protected Clinical Document

Tests Document Consumer

== 11955 ==

Accept Submission of Clinical Document which references a Consent submitted earlier.

Tests Document Registry

Depends on test 11959

== 11956 ==

Reject Register transaction of a Clinical Document with Confidentiality Code not represented by an Active Consent within the Registry actor.

Tests Document Registry

== 11957 ==

Accept Stored Query which includes filtering on Confidentiality Codes. The Consents containing these Confidentiality Codes and the Clinical Documents referencing these Confidentiality Codes were submitted earlier in separate tests.

Tests Document Registry

== 11958 ==

Accept Stored Query which does not include filtering on Confidentiality Codes

Tests Document Registry

== 11959 == 

Load BPPC test data.

Tests Document Registry

== 11960 == 

Stored Query does not return Clinical Documents if Consent has been revoked.

Tests Document Registry

Depends on Test 11959

== 11961 == 

Stored Query does not return Clinical Documents if Consent has expired.

Tests Document Registry

Depends on Test 11959


See Test [[XDS_Test_Kit_2006-2007_Test_Descriptions#11954 | 11954 - Query for Clinical Document]]

== 11962 == 

'''Submit XDM content for evaluation'''

'''References'''
: ITI TF-2 3.32

'''Actors Tested'''
: Portable Media Creator

Generate a ZIP file containing a single Submission Set and two documents in XDM format. Document type and details of metadata are not constrained. Please use the [http://129.6.24.109:9080/xdstools/jsp/validationService/index.jsp Metadata Validator] to check your metadata before submitting. Use the Register Transaction setting.

Test will be evaluated based on fullness of metadata (required fields present), correct linkage between metadata and documents, correct directory structure, and correct content in support files (README.TXT and INDEX.HTM).

ZIP file shall be uploaded into Kudu as a 'log file'.

==  11963 == 

'''Accept Submission'''

Verify that the Document Recipient can accept an XDR-style transmission.  This will be tested via manual upload from disk. There is currently no infrastructure to test ebMS. 

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Recipient

'''Testing Document Recipient Actor'''
# Use the test material in the test kit in tests/11963
# Perform the manual import
# Capture screen image showing
#* Status of transaction acceptance OR 
#* Display of imported material
# Log the screen capture in Kudu

== 11964 ==

'''Send One Document'''

Compose XDR-style transmission of one or more documents. Submit this content to Kudu in a ZIP file.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Source

The ZIP file shall contain the following files representing the content of an XDR-style transmission:

* METADATA.HDR - containing the header lines necessary for transmitting the metadata (the headers that would be present in the MIME Multipart-Part containing the metadata)
* METADATA.XML - containing the metadata of the submission
* Content to match the metadata:
** Each piece of content is to be represented by two files: NAME.HDR and NAME.EXT where 
*** NAME is replaced by a  unique name within the submission which matches the URI element of the metadata.  
*** EXT is replaced with the correct file extension for that file/media type. 
* The header file shall contain the necessary MIME Multipart-Part header content necessary for transmitting this document. The content file shall contain the content byte-stream to be transmitted. 

The metadata, header, and content portions of the submission shall be consistent by XDS rules.

== 11965 ==

'''Accept XDM Content'''

This test supplies example XDM-style content for testing Portal Media Importer actors. No logging of test results is required.

'''References'''
: ITI TF-2 3.32

'''Actors Tested'''
: Portal Media Importer

Content can be found in tests/11965.





==  11949 == 

'''Stored Query for ObjectRefs'''

Verify that Document Consumer can issue a stored query to the Registry for ObjectRefs and that a Document Registry can service such a query.

Why is this required? Any potential document listing can be very long.  To use LeafClass queries to generate listing pages (pick lists) would be very slow as this requires the Registry to assemble metadata XML for each document. Starting with an ObjectRef query that returns just the list of identifiers for each document can be used to generate 'page at a time' listing.  For each page, a full LeafClass query can be issued to get the content for display.

'''References'''
: ITI TF-2 3.18

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: Test [[#11870]] must be run before this test. It loads necessary test data.

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/yr3a/storedquery</nowiki>
# Have your Document Consumer send the query in test/11949/query.xml.
# Verify that you get a successful RegistryResponse message in return containing 4 ObjectRefs.
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit test/11949/test.properties
# Change the URL parameter to point to your registry.
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

==  11950 == 

'''Stored Query for LeafClass'''

Verify that Document Consumer can query the Registry for LeafClass and that a Document Registry can service such a query.

'''References'''
: ITI TF-2 3.18

'''Actors Tested'''
: Document Consumer
: Document Registry

'''Dependencies'''
: Test 11870 must be run before this test

'''Testing Document Consumer Actor'''
# Configure the Document Consumer under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/portals/yr3a/storedquery</nowiki>
# Have your Document Consumer send the query in test/11950/query.xml.
# Verify that you get a successful RegistryResponse message in return containing 1 ExtrinsicObject.
# Log the results: [[#Result_Reporting_-_Client_Testing_against_server]]

'''Testing Document Registry Actor'''
# Edit test/11950/test.properties
# Change the URL parameter to point to your registry.
# Run the test using [[XDS_Test_Kit_2005-2006#How_to_use_the_xdstest_tool | xdstest]].
# Log the results: [[#Result_Reporting_-_Server_Testing_using_xdstest]]

== 11966 ==

'''Accept one document via XDS.b'''

Verify that the XDS.b Document Repository can accept a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|single document]] via the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction and forward the updated metadata to the Public Registry. The repository is tested with both MTOM and MTOM/XOP encodings

'''References'''
: ITI TF-2 3.41
: ITI TF-2 3.42

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Resources'''
: tests/11966 section of [[XDS_Test_Kit_Download|test kit]] which contains ''submit'' and ''eval'' sub-directories

'''Testing Document Repository Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction to your Repository. Your Repository forwards the metadata on to the Public Registry via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction. This is done twice, once with MTOM and once with MTOM/XOP encodings.

# Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/test11966</nowiki>
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Repository. This test plan has two test steps: MTOM/XOP and MTOM. Both must be successful.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to query and evaluate your Repository's submission to the Public Registry. This queries for metadata from both the MTOM/XOP and MTOM encoded submissions.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''eval'' parts of the test

'''Evaluation''' by the Public Registry
# [[#Schema|Schema]]
# [[#Metadata_Validator|Metadata Validator]]
# Correct content ([[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]])
# Correct hash and size computed by Repository actor and placed in metadata.


'''Evaluation''' by xdstest2
# Evaluation query returns correct metadata

== 11969 ==

'''Submit a Folder via XDS.b'''

Verify that the XDS.b Document Source can submit a Folder via [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Source

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: examples/11969 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Source Actor'''
# Configure your Document Source actor to submit to the Public Repository at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/test11969</nowiki>
# Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Folder|Submission Set containing a single Folder]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction 
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]

== 11970 ==

'''Submit a Folder with an initial document via XDS.b'''

Verify that the XDS.b Document Source can submit a Folder and initial document via [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Source

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: examples/11970 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Source Actor'''
# Configure your Document Source actor to submit to the Public Repository at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/test11970</nowiki>
# Submit a [[Metadata_Patterns# Submission Set containing a Single Folder with initial Document| Submission Set containing a Single Folder with initial Document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction 
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]

==  11972 == 

'''Add Existing Document to Existing Folder using XDS.a'''

Add an existing Document to an existing Folder.  The Folder is identified by its UUID which is obtained from a query of your choice. 

This submission consists of:
* an XDSSubmissionSet object
* a HasMember Association object linking the existing Folder (in Registry) with the existing Document
* a HasMember Association object linking the Submission Set to the above Association
* ObjectRefs identifying the existing Folder and Document as being objects already in the registry

'''References'''
: ITI TF-2 3.15

'''Actors Tested'''
: Document Source

'''Dependencies'''
: Creation of a Folder to add the document to. Test 11728 describes this.
: Submission of a Document to add to the Folder. Test 11746 describes this.

'''Testing Document Source Actor'''
# The existing Folder and Document must have the same Patient ID
# Allocate a new and uniqueID for the Submission Set (Associations do not have uniqueIds) (see [[#Using_the_Public_Registry]])
# Create a Folder per test 11728.
# Create a Document per test 11746.
# Configure the Document Source under test to send to the URL
#* <nowiki>http://ihexds.nist.gov:9080/tf5/services/test11972</nowiki>
# Identify the UUID of the Folder of interest with a query of your choosing
# Formulate a submission as described above or use the example metadata found in examples/11972
#* If you use this example, the Folder is referenced symbolically as "$Folder$". This must be replaced with the actual UUID of the folder object in the registry.  Addionally, an ObjectRef with its id set to this UUID must be present in the submission. Repeat for the Document.
# Have your Document Source send the submission 
# Verify that you get a successful RegistryResponse message in return.
# Log the results: [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository]]


==  11973 == 

'''Add Existing Document to Existing Folder using XDS.b'''

Add an existing Document to an existing Folder.  The Folder is identified by its UUID which is obtained from a query of your choice. 

This submission consists of:
* an XDSSubmissionSet object
* a HasMember Association object linking the existing Folder (in Registry) with the existing Document
* a HasMember Association object linking the Submission Set to the above Association

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Source

'''Dependencies'''
: Creation of a Folder to add the document to. Test 11969 describes this.
: Submission of a Document to add to the Folder. Test 12049 describes this.

'''Testing Document Source Actor'''
# The existing Folder and Document must have the same Patient ID
# Allocate a new and uniqueID for the Submission Set (Associations do not have uniqueIds) (see [[#Using_the_Public_Registry]])
# Create a Folder per test 11969.
# Create a Document per test 12049.
# Configure the Document Source under test to send to the URL
#* <nowiki>http://ihexds.nist.gov:9080/tf5/services/test11973</nowiki>
# Identify the UUID of the Folder of interest with a query of your choosing
# Formulate a submission as described above or use the example metadata found in examples/11973
#* If you use this example, the Folder is referenced symbolically as "$Folder$". This must be replaced with the actual UUID of the folder object in the registry. Repeat for the Document.
# Have your Document Source send the submission 
# Verify that you get a successful RegistryResponse message in return.
# Log the results: [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository]]

==  11974 == 

'''Replace Existing Document'''

Verify that Document Source can issue a document replacement. To replace a document, an original document must be discovered through a query. Its UUID must be extracted from the query results. The new document is composed along with a RPLC Association to link the new document to the old.  The registry adaptor takes responsibility for deprecating the old document. More specifically, the following must be composed in a submission:
* an XDSSSubmissionSet object
* an XDSDocumentEntry object
* a HasMember Association linking Submission Set to the Document
* a RPLC Association linking the new Document to the existing document being replaced 
There must also be a single document included in the submission as an attachment.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''Testing Document Source Actor'''
# Allocate a new patient ID and uniqueIDs (see [[XDS_Test_Kit_2007-2008_Test_Descriptions#Using_the_Public_Registry]])
# Create a Document to be replaced. Test [[#12049 | 12049]] can be used.
# Using a query of your choice, discover the UUID of the Document to be replaced
# Compose metadata to perform the replacement.
#* Set the patientId on the Submission Set and document
#* Set uniqueIds in all objects as needed
#* Set the targetObject attribute on the RPLC Association object to the UUID of the document submitted by 12049
#* Add an ObjectRef for the UUID of the document to indicate that an object already in the registry is being referenced
#* An example is found in the test kit in examples/11974
# Configure the Document Source under test to send to the URL
#* <nowiki>http://ihexds.nist.gov:9080/tf5/services/test11974</nowiki>
# Have your Document Source send the metadata and replacement document
# Verify that you get a successful RegistryResponse message in return
# Log the results: [[XDS_Test_Kit_2007-2008_Test_Descriptions#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository]]

== 11979 ==

'''Accept two documents via XDS.b'''

Verify that the XDS.b Document Repository can accept a submission containing [[Metadata_Patterns#Submission_Set_containing_two_Documents|two documents]] via the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction and forward the updated metadata to the Public Registry.

'''References'''
: ITI TF-2 3.41
: ITI TF-2 3.42

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Resources'''
: tests/11979 section of test kit which contains ''submit'' and ''eval'' sub-directories

'''Testing Document Repository Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_Two_Documents|Submission Set containing two Documents]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction to your Repository. Your Repository forwards the metadata on to the Public Registry via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction

# Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/registryB2doc</nowiki>
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Repository
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to query and evaluate your Repository's submission to the Public Registry
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''eval'' parts of the test

'''Evaluation''' by the Public Registry
# [[#Schema|Schema]]
# [[#Metadata_Validator|Metadata Validator]]
# Correct content ([[Metadata_Patterns#Submission_Set_containing_Two_Documents|Submission Set containing two Documents]])
# Correct hash and size computed by Repository actor and placed in metadata.

'''Evaluation''' by xdstest2
# Evaluation query returns correct metadata

== 11980 ==

'''Accept Document with size, hash and URI attributes via XDS.a'''

Verify that the XDS.a Document Repository can accept a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|single document]] via the [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction and forward the updated metadata to the Public Registry. The XDSDocumentEntry metadata is already populated with size, hash, and URI attributes.  These must be overwritten with the correct values.

'''References'''
: ITI TF-2 3.14
: ITI TF-2 3.15

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Testing Document Repository Actor'''
# Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://localhost:9080/axis2/services/repositoryAonedoc</nowiki>
# Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction to your Repository. Your Repository forwards the metadata on to the Public Registry via the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction after updating the size, hash, and URI attributes.
#* [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan
#* [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# Log the following results into Kudu in separate files
#* Uploading log.xml into Kudu 
#* Uploading the [[#Uploading_test_log_reference|test log reference]] (testlog.txt)

== 11981 ==

'''Accept Document with size, hash and URI attributes via XDS.b'''

Verify that the XDS.b Document Repository can accept a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|single document]] via the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction and forward the updated metadata to the Public Registry. The XDSDocumentEntry metadata is already populated with size, hash, and URI attributes.  These must be overwritten with the correct values.

'''References'''
: ITI TF-2 3.41
: ITI TF-2 3.42

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Testing Document Repository Actor'''
# Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://localhost:9080/axis2/services/repositoryBonedoc</nowiki>
# Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction to your Repository. Your Repository forwards the metadata on to the Public Registry via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction after updating the size, hash, and URI attributes.
#* [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan
#* [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]

==  11982 == 

'''Reject submissions where metadata and documents do not match (XDS.a)'''

Verify that the XDS.a Document Repository will reject submissions where there is a mismatch between metadata and the documents attached.

'''References'''
: ITI TF-2 3.15

'''Actors Tested'''
: XDS.a Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Resources'''
: tests/11982 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, ''submit'' and ''eval''
: tests/11982/readme.txt which provides descriptions of the individual test steps
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Repository Actor'''


# Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/xdsrepositorya</nowiki>
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Repository
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to query and evaluate your Repository's submission to the Public Registry
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''eval'' parts of the test


'''Evaluation''' by xdstest2
# The xdstest2 tool will evaluate that the proper error message is returned from each test step.

==  11983 == 

'''Reject submissions where metadata and documents do not match (XDS.b)'''

Verify that the XDS.a Document Repository will reject submissions where there is a mismatch between metadata and the documents attached.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: XDS.b Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Resources'''
: tests/11983 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, ''submit'' and ''eval''
: tests/11983/readme.txt which provides descriptions of the individual test steps
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Repository Actor'''


# Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/xdsrepositoryb</nowiki>
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Repository
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to query and evaluate your Repository's submission to the Public Registry
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''eval'' parts of the test


'''Evaluation''' by xdstest2
# The xdstest2 tool will evaluate that the proper error message is returned from each test step.

== 11986 ==

'''Return Errors from Registry (XDS.b)'''

This test demonstrates that a Document Repository-b returns errors from the Document Registry back to the Document Source. This test is a repeat of test 11997 which tests that a Registry rejects unknown Patient IDs. The Repository under test points to the Public Registry which generates the original error.  The responsibility of the Repository is to return the errors to the Document Source.

'''References'''
: ITI TF-2 3.41, 3.42

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: None

'''You will need to'''
: Run this after test 11997

'''Resources'''
: tests/11986 section of [[XDS_Test_Kit_Download|test kit]]


'''Testing Document Repository Actor'''
# Configure your Repository to forward metadata to the Public Registry at <nowiki>http://129.6.24.109:9080/axis2/services/xdsregistryb</nowiki>
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan. Xdstest2 validates that the correct error code is returned.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. Return the log.xml file.

== 11990 ==

'''Accept Register one document via XDS.b'''

Verify that the XDS.b Document Registry can accept a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|single document]] via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Your registry must support the GetSubmissionSetAndContents Stored Query to pass the evaluation step of this test

'''You will need to'''
: None

'''Resources'''
: tests/11990 section of [[XDS_Test_Kit_Download|test kit]]


'''Testing Document Registry Actor'''
Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from both the ''submit'' and ''eval'' parts of the test.

== 11991 ==

'''Accept Register two documents via XDS.b'''

Verify that the XDS.b Document Registry can accept a [[Metadata_Patterns#Submission_Set_containing_Two_Documents|two documents]] via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Testing Document Registry Actor'''
# Submit a [[Metadata_Patterns#Submission_Set_containing_Two_Documents|Submission Set containing two Documents]] using the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query.
#* [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry
#* [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#* [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
#* [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from both the ''submit'' and ''eval'' parts of the test.

== 11992 ==

'''Accept Document Replace via XDS.b'''

Verify that the XDS.b Document Registry can accept a [[Metadata_Patterns#Document_Replace|Document Replace]] via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction. No transformations or addendum are present.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''


'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Document_Replace|Document Replace]] using the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry. This will submit a submission set containing a single document. This document will be the target of the replace operation in the next step.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''rplc'' sub-directory to perform the replacement. This will submit a submission set containing a single document, the replacement document, and the RPLC association which will trigger the registry to deprecate the original document (submitted in the last step).
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry. This step has two parts.  First a test step named validate_deprecate will test that the orginal document is deprecated.  The second test step, validate_new, will test that the replacement document is present.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml files from the ''submit'', ''rplc'', and ''eval'' parts of the test.

'''Evaluation'''
# Submit, rplc, eval steps must be successful
# Within the eval step, the validate_deprecate test step must show that the original document is deprecated and the validate_new must show that the replacement document is approved (status = Approved).


== 11993 ==

'''Accept Document Addendum via XDS.b'''

Verify that the XDS.b Document Registry can accept a [[Metadata_Patterns#Document_Addendum|Document Addendum]] via the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction.

'''References'''
: ITI TF-2 3.42

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Document_Addendum|Document Addendum]] using the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query. An overview of this test is:
* Submit a submission set containing a single document.  Do this twice.
* Replace (issue RPLC) for one of the documents
* Attempt addendum on both original documents.  Creating an addendum on the replaced document must fail. Creating an addendum on the non-replaced document must succeed.
* Issue GetSubmissionSetandContents Stored Query on both addendum attempts. The plain addendum must succeed and the one involving the replace must fail. In this case succeed and fail simply refers to whether content is returned and not the status on the Stored Query.

The detailed steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry. 
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''rplc'' sub-directory to perform the replacement. 
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''apnd'' sub-directory to perform the addendum.  
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml files from the ''submit'', ''rplc'', ''apnd'', and ''eval'' parts of the test.

== 11994 ==

'''Accept Document Transformation via XDS.b'''

Verify that the XDS.b Document Registry can accept a [[Metadata_Patterns#Document_Transformation|Document Transformation]] via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Document_Transformation|Document Transformation]] using the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query. An overview of this test is:
* Submit a submission set containing a single document.  Do this twice.
* Replace (issue RPLC) for one of the documents
* Attempt transformation on both original documents.  Creating a transformation on the replaced document must fail. Creating a transformation on the non-replaced document must succeed.
* Issue GetSubmissionSetandContents Stored Query on both transformation attempts. The plain transformation must succeed and the one involving the replace must fail. In this case succeed and fail simply refers to whether content is returned and not the status on the Stored Query.

The detailed steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry. 
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''rplc'' sub-directory to perform the replacement. 
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''xfrm'' sub-directory to perform the transformation.  
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml files from the ''submit'', ''rplc'', ''xfrm'', and ''eval'' parts of the test.

== 11995 ==

'''Accept Document Transform/Replace via XDS.b'''

Verify that the XDS.a Document Registry can accept a [[Metadata_Patterns#Document_Transform_Replace|Document Transform Replace]] via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction.  No transformations or addendum are present.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''

'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Document_Replace|Document Replace]] using the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction to your Registry. Then validate the state of your Registry using the GetSubmissionSetAndContents Stored Query.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry. This will submit a submission set containing a single document. This document will be the target of the replace operation in the next step.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''rplc'' sub-directory to perform the replacement. This will submit a submission set containing a single document, the transformation/replacement document, and the XFRM_RPLC association which will trigger the registry to deprecate the original document (submitted in the last step).
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry. This step has two parts.  First a test step named validate_deprecate will test that the orginal document is deprecated.  The second test step, validate_new, will test that the replacement document is present.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml files from the ''submit'', ''rplc'', and ''eval'' parts of the test.

'''Evaluation'''
# Submit, rplc, eval steps must be successful
# Within the eval step, the validate_deprecate test step must show that the original document is deprecated and the validate_new must show that the replacement document is approved (status = Approved).

== 11996 ==

'''Reject Submission of Invalid Patient ID via XDS.b'''

This test allows an implementation of the Document Registry actor to show that it rejects submissions of documents that are registered to patients whose patient ID has not been received through the Patient Identity Feed transaction. 

'''References'''
: ITI TF-2 3.42

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Resources'''
: tests/11996 section of [[XDS_Test_Kit_Download|test kit]]


'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction to your Registry. The registry must reject the submission giving the '''XDSUnknownPatientId''' error code
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan. The testplan already includes an unlikely Patient Id.  If that Patient Id is registered in your system change the Patient Id to one that is not registered.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file showing the failure.  The testplan is configured so that a failure on the submission yields a successful status on the test.


== 11997 ==

'''Reject Submission Set, Patient ID does not match Document (XDS.b)'''

This test allows an implementation of the Document Registry-b actor to show that it rejects submissions where the Submission Set and Document have different Patient IDs. 

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Registry-b

'''Dependencies'''
: None

'''You will need to'''
: None

'''Resources'''
: tests/11997 section of [[XDS_Test_Kit_Download|test kit]]


'''Testing Document Registry Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction to your Registry. The metadata provided has different Patient IDs in the Submission Set and the Document metadata. The registry must reject the submission giving the '''XDSPatientIdDoesNotMatch''' error code. You may change the Patient IDs coded if that makes the test easier as long as they are different.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' directory. This proves that the correct error message was returned.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' directory. This proves that the metadata was not stored.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. Return the log.xml file from both the ''submit'' and ''eval'' directories.  The testplans are configured so that a failure on the submission yields a successful status on the test and finding no documents in the query yields successful test results.

==  11999 == 

'''Accept Create Folder'''

Verify that the XDS.b Document Registry can accept the submission of a Folder.    

This submission consists of:
* an XDSSubmissionSet object
* an XDSFolder object
* an HasMember Association object linking the Submission Set to the Folder

'''References'''
: ITI TF-2 3.42

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Your registry must support the GetSubmissionSetAndContents Stored Query to pass the evaluation step of this test

'''You will need to'''
: None

'''Resources'''
: tests/11999 section of [[XDS_Test_Kit_Download|test kit]]

'''Testing Document Registry Actor'''
An overview of this test is:
* Submit a folder within a submission set to document registry
* Issue GetSubmissionSetAndContents to verify content in registry

The test steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from both the ''submit'' and ''eval'' parts of the test.

==  12000 == 

'''Accept Create Folder with Initial Document'''

Verify that the XDS.b Document Registry can accept the submission of a Folder with a document.    

This submission consists of:
* an XDSSubmissionSet object
* an XDSFolder object
* a HasMember Association object linking the Submission Set to the Folder
* a Document object
* a HasMember Association object linking the Folder to the Document

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Your registry must support the GetSubmissionSetAndContents and GetFolderAndContents Stored Queries to pass the evaluation step of this test

'''You will need to'''
: None

'''Resources'''
: tests/12000 section of [[XDS_Test_Kit_Download|test kit]]

'''Testing Document Registry Actor'''
An overview of this test is:
* Submit above described metadata
* Issue GetSubmissionSetAndContents to verify content in registry

The test steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from both the ''submit'' and ''eval'' parts of the test.

==  12001 == 

'''Accept Add New Document to Folder'''

Verify that the XDS.b Document Registry can accept a submission that contains a document which is added to an existing folder.    

This submission consists of:
* an XDSSubmissionSet object
* an XDSDocumentEntry object
* an HasMember Association linking the Submission Set to the Document
* an HasMember Association linking an existing Folder to this new Document

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Your registry must support the GetFolderAndContents Stored Query to pass the evaluation step of this test

'''You will need to'''
: None

'''Resources'''
: tests/12001 section of [[XDS_Test_Kit_Download|test kit]]

'''Testing Document Registry Actor'''
An overview of this test is:
* Submit an empty folder
* Submit a document with the association to link it to the folder
* Issue GetFolderandContents Stored Query to verify contents of Registry

The test steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''create_folder'' sub-directory to perform the submission to your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''add_to_folder'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from the ''create_folder'', ''add_to_folder'' and ''eval'' parts of the test.

==  12002 == 

'''Reject Add Document to Folder - Patient ID does not match'''

Verify that the XDS.b Document Registry will reject a submission that contains a document which is added to an existing folder with a different Patient ID.    

This submission consists of:
* an XDSSubmissionSet object
* an XDSDocumentEntry object
* an HasMember Association linking the Submission Set to the Document
* an HasMember Association linking an existing Folder to this new Document

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: Your registry must support the GetFolderAndContents Stored Query to pass the evaluation step of this test

'''You will need to'''
: None

'''Resources'''
: tests/12002 section of [[XDS_Test_Kit_Download|test kit]]

'''Testing Document Registry Actor'''
An overview of this test is:
* Submit an empty folder
* Submit a document with the association to link it to the folder. The Patient ID on the Document does not match that on the Folder.
* Issue GetFolderandContents Stored Query to verify contents of Registry. The Document must not be a member of the Folder.

The test steps are:

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''create_folder'' sub-directory to perform the submission to your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''add_to_folder'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to perform the evaluation (query) against your Registry
# [[##Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file from the ''create_folder'', ''add_to_folder'' and ''eval'' parts of the test.

==  12004 == 

'''Reject Duplicate Document uniqueID with Different Hash (XDS.b)'''

Verify that the XDS.b Document Registry will 
: accept a duplicate XDSDocumentEntry, with same XDSDocumentEntry.uniqueId, if XDSDocumentEntry.hash is the same
: reject if the hash is different

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: XDS.b Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Resources'''
: tests/12004 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, ''submit'' and ''eval''
: tests/12004/readme.txt which provides descriptions of the individual test steps


'''Testing Document Registry Actor'''


# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to query and evaluate your Registry's contents
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''eval'' parts of the test


'''Evaluation''' by xdstest2
# The xdstest2 tool will evaluate that the proper error message is returned from each test step.

==  12005 == 

'''Register with mutual TLS'''

Repeat any Register-b test over TLS

== 12021 ==

'''Accept Retrieve Document Set – two documents'''

Verify that the XDS.b Document Repository can properly respond to a [[XDS_Transactions#Retrieve_Document_Set|Retrieve Document Set transaction]] requesting two documents. 

'''References'''
: ITI TF-2 3.43

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test
: Best if run after test [[#11966|11966]]

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Resources'''
: tests/12021 section of [[XDS_Test_Kit_Download|test kit]] with contains ''submit'' and ''retrieve'' sections


'''Testing Document Repository Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction to your Repository. Your Repository forwards the metadata on to the Public Registry via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction. With this document in your Repository, retrieve the document via the Retrieve Document Set transaction.
# Do one of the following:
#* Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/xdsregistryb</nowiki>
#* Configure your Document Repository to not forward metadata
#* Configure your Document Repository to forward metadata to your Registry.  
This test does not depend on interactions with a Registry so this configuration is for your convenience.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Repository
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''retrieve'' sub-directory to perform the Retrieve Document Set transaction to your repository.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''retrieve'' parts of the test

'''Evaluation'''
# [[#Schema|Schema]]
# RepositoryUniqueId matches (compares value from RetrieveDocumentSetRequest against value from  RetrieveDocumentSetResponse)
# DocumentUniqueId retrieved matches value submitted
# mimeType matches
# Content of document matches

== 12023 ==

'''Retrieve Documents'''

Verify that the XDS.b Document Consumer can use the [[XDS_Transactions#Retrieve_Document_Set|Retrieve Document Set transaction]] to retrieve documents from a Document Repository.

'''References'''
: ITI TF-2 3.43

'''Actors Tested'''
: Document Consumer

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test
: [[#Test Data Description|Test data]] pre-loaded into the Public Registry

'''You will need to'''

'''Resources'''
: tests/12029 section of [[XDS_Test_Kit_Download|test kit]] with contains ''submit'' and ''retrieve'' sections


'''Testing Document Repository Actor'''

Submit a [[XDS_Transactions#Retrieve_Document_Set|Retrieve Document Set]] transaction to the Public Repository and successfully accept the return document.  The request may be for one or more documents.

# Test data must be selected from [[#Test Data Description|here]]
# The Retrieve must be executed against two different EndPoints on the Public Registry/Repository. One returns the documents encoded with MTOM the other with MTOM/XOP. The Endpoints are documented [[XDS_Main_Page#Important_URLs_.2F__WS_Endpoints|here]].
# The next section documents generically how to log results.  You must log two URLS as shown below, one for MTOM retrieve and the other for MTOM/XOP retrieve.

Document your success by using the [[XDS_Test_Log_Browser|Test Log Browser]] to view the result of your test. Specifically:
# Use the [[XDS_Test_Log_Browser|Test Log Browser]] to find the record of your successful document retrieve.
# Select the link next to the '''Message ID''': label (upper right corner).
# Copy this URL into a file with the name ''url.txt''.
# Submit this file as evidence of your success.

== 12024 ==

'''Accept Retrieve'''

Verify that the XDS.a Document Repository can properly respond to a [[XDS_Transactions#Retrieve|Retrieve transaction]] requesting a single document. 

'''References'''
: ITI TF-2 3.17

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Resources'''
: tests/12024 section of [[XDS_Test_Kit_Download|test kit]] with contains ''submit'' ''query'', and ''retrieve'' sections

''Overview''
# Submit a document
# Query to get the URI
# Retrieve via the URI and validate size, mimetype, hash

'''Testing Document Repository Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction to your Repository. Your Repository forwards the metadata on to the Public Registry via the [[XDS_Transactions#Register_Document_Set|Register Document Set]] transaction. With this document in your Repository, retrieve the document via the Retrieve Document Set transaction.

# Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/xdsregistrya</nowiki>

# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Repository
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''query'' sub-directory to perform a Stored Query to the Public Registry
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''retrieve'' sub-directory to perform the Retrieve transaction to your repository. The URI is automatically extracted from the query results.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of the ''submit'', ''query'', ''retrieve'' parts of the test

'''Evaluation'''
# Retrieve runs without error
# Mime type returned as Content-Type
# Mime type matches the submission
# Document size is correct
# Hash of retrieved document matches submission

== 12028 ==

'''Accept Retrieve Document Set – single document via TLS'''

Verify that the XDS.b Document Repository can properly respond to a [[XDS_Transactions#Retrieve_Multiple_Documents|Retrieve Multiple Documents transaction]] requesting a single document over a TLS channel. 

'''References'''
: ITI TF-2 3.43

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test
: Best if run after test [[#11966|11966]]

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Resources'''
: tests/12028 section of [[XDS_Test_Kit_Download|test kit]] with contains ''submit'' and ''retrieve'' sections


'''Testing Document Repository Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction to your Repository. Your Repository forwards the metadata on to the Public Registry via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction. With this document in your Repository, retrieve the document via the Retrieve Document Set transaction.
# Do one of the following:
#* Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/xdsregistryb</nowiki>
#* Configure your Document Repository to not forward metadata
#* Configure your Document Repository to forward metadata to your Registry.  This test does not depend on interactions with a Registry so this configuration is for your convenience.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Repository
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''retrieve'' sub-directory to perform the Retrieve Document Set transaction to your repository. This requires you to configure both the RegistryEndpoint and RepositoryUniqueId elements of the test step to point to your repository.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''retrieve'' parts of the test

'''Evaluation'''
# [[#Schema|Schema]]
# RepositoryUniqueId matches (compares value from RetrieveDocumentSetRequest against value from  RetrieveDocumentSetResponse)
# DocumentUniqueId retrieved matches value submitted
# mimeType matches
# Content of document matches
# Communication to the Repository is over a TLS channel

== 12029 ==

'''Accept Retrieve Document Set – single document'''

Verify that the XDS.b Document Repository can properly respond to a [[XDS_Transactions#Retrieve_Multiple_Documents|Retrieve Multiple Documents transaction]] requesting a single document. 

'''References'''
: ITI TF-2 3.43

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test
: Best if run after test [[#11966|11966]]

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]

'''Resources'''
: tests/12029 section of [[XDS_Test_Kit_Download|test kit]] with contains ''submit'' and ''retrieve'' sections


'''Testing Document Repository Actor'''

Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction to your Repository. Your Repository forwards the metadata on to the Public Registry via the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction. With this document in your Repository, retrieve the document via the Retrieve Document Set transaction.
# Do one of the following:
#* Configure your Document Repository actor to forward metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/xdsregistryb</nowiki>
#* Configure your Document Repository to not forward metadata
#* Configure your Document Repository to forward metadata to your Registry.  This test does not depend on interactions with a Registry so this configuration is for your convenience.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Repository
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''retrieve'' sub-directory to perform the Retrieve Document Set transaction to your repository. This requires you to configure both the RegistryEndpoint and RepositoryUniqueId elements of the test step to point to your repository.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''retrieve'' parts of the test

'''Evaluation'''
# [[#Schema|Schema]]
# RepositoryUniqueId matches (compares value from RetrieveDocumentSetRequest against value from  RetrieveDocumentSetResponse)
# DocumentUniqueId retrieved matches value submitted
# mimeType matches
# Content of document matches

== 12037 ==

'''Accept Retrieve Document Set by Integrated Source/Repository – two documents'''

Verify that the XDS.b Integrated Document Source/Repository can properly respond to a [[XDS_Transactions#Retrieve_Multiple_Documents|Retrieve Multiple Documents transaction]] requesting two documents. 

'''References'''
: ITI TF-2 3.43

'''Actors Tested'''
: Integrated Source/Repository

'''Dependencies'''
: Test 12038 establishes the test data need to run this test

'''You will need to'''

'''Resources'''
: tests/12038 section of [[XDS_Test_Kit_Download|test kit]] 

'''Testing Integrated Source/Repository Actor'''

The detailed instructions are found in tests/12037/readme.txt.  The overview is to re-run test 12038 after editing the testplan.xml file and adding the second document submitted in 12038 to the retrieve request.  

== 12038 ==

'''Accept Retrieve Document Set by Integrated Source/Repository – single document'''

Verify that the XDS.b Integrated Document Source/Repository can properly respond to a [[XDS_Transactions#Retrieve_Multiple_Documents|Retrieve Multiple Documents transaction]] requesting a single document. 

'''References'''
: ITI TF-2 3.43

'''Actors Tested'''
: Integrated Source/Repository

'''Dependencies'''

'''You will need to'''

'''Resources'''
: tests/12038 section of [[XDS_Test_Kit_Download|test kit]] 

'''Testing Integrated Source/Repository Actor'''

The detailed instructions are found in tests/12038/readme.txt.  The overview is to create two documents in your repository and identify the unique IDs. One of the documents is retrieved using the testplan in tests/12038 and the xdstest2 tool.  Results of the testplan and Test Log message IDs are logged to Kudu. The data created in this test is used for other Integrated Source/Repository tests.

== Syslog Tests ==

'''General instructions for testing syslog'''


'''References'''
: None

'''Actors Tested'''
: Document Source, Document Consumer, Document Registry, Document Repository

'''Dependencies'''
: None

'''You will need to'''
: None

'''Resources'''
: Syslog Browser available at http://129.6.24.109:9080/SyslogBrowser/index.html


'''Testing'''
For each actor under test, direct Syslog submissions to IP: 129.6.24.109  PORT: 8087


'''Logging Results'''
Log in Kudu the Message Number which can be found at the top of the Message Display panel (right half of screen)

== 12045 ==

'''Accept Retrieve Document'''

Verify that the XDS.a Integrated Source/Repository can properly respond to a [[XDS_Transactions#Retrieve|Retrieve transaction]] requesting a single document. 

'''References'''
: ITI TF-2 3.17

'''Actors Tested'''
: Integrated Source/Repository

'''Dependencies'''
: None

'''You will need to'''
: None

'''Resources'''
: tests/12045 section of [[XDS_Test_Kit_Download|test kit]]


'''Testing Integrated Source/Repository Actor'''

# Configure your Integrated Source/Repository actor to send metadata to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/xdsregistrya</nowiki>
# Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] to your Integrated Source/Repository using your own tools. Your Integrated Source/Repository must forward the metadata to the Public Registry.
# Using the testplan in tests/12045/query
## Edit testplan.xml inserting your document's XDSDocumentEntry.uniqueID into the test plan replacing the text string $uid$.
## Run the test plan using xdstest2, it is already configured to query the Public Registry. This will query the Public Registry returning the full metadata for your document including the URI you registered.
# Using the testplan in tests/12045/retrieve
## Edit the testplan changing the following values:
##* <ExpectedMimeType/> to hold Mime Type of your document
##* <ReferenceDocument/> to hold the filename of your document on your disk
## Run the test plan using xdstest2.  This will extract the document URI from the previous query test plan, issue a Retrieve Document transaction to your Repository, validate the contents and mimetype, and save the results in log.xml
# [[#Uploading_test_log_reference|Log the results]]  of the ''query'' and ''retrieve'' parts of the test

'''Evaluation'''
# Retrieve runs without error
# Correct Mime type returned as Content-Type
# Mime type matches the submission (according to <ExpectedMimeType/>)
# Document size is correct  (according to <ReferenceDocument/>)
# Hash of retrieved document matches submission (according to <ReferenceDocument/>)



==  12046 == 

'''Provide and Register-b (XDS.b) with mutual TLS'''

Repeat [[#12049|test 12049]] with mutual TLS enabled.

== 12047 ==

'''Submit two documents via XDS.b'''

Verify that the XDS.b Document Source can submit [[Metadata_Patterns#Submission_Set_containing_Two_Documents|two documents]] together via the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: examples/12047 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]


'''Testing Document Source Actor'''
# Configure your Document Source actor to submit to the Public Repository at EndPoint <nowiki>http://ihexds.nist.gov:9080/tf5/services/repositoryB2doc</nowiki>
# Submit a [[Metadata_Patterns#Submission_Set_containing_Two_Documents|Submission Set containing two Documents]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction 
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]

== 12049 ==

'''Submit one document via XDS.b'''

Verify that the XDS.b Document Source can submit a single document via [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: examples/12049 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Source Actor'''
# Configure your Document Source actor to submit to the Public Repository at EndPoint <nowiki>http://ihexds.nist.gov:9080/tf5/services/repositoryBonedoc</nowiki>
# Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set-b|Provide and Register Document Set-b]] transaction 
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]

== 12051 ==

'''Register one document via XDS.b'''

Verify that the XDS.b Combined Document Source / Document Repository can register a single document via [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction.

'''References'''
: ITI TF-2 3.42

'''Actors Tested'''
: Combined Document Source / Document Repository

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: examples/12051 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Source Actor'''
# Configure your Combined Document Source / Document Repostory actor to register to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/registryBonedoc</nowiki>
# Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Register_Document_Set-b|Register Document Set-b]] transaction to the Public Registry.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]

==  12052 == 

'''Register One Document via XDS.a with mutual TLS'''

Verify that the XDS.a Integrated Source/Repository can register a document over mutual TLS.

'''References'''
: ITI TF-2 3.14
: ITI TF-2 3.19

'''Actors Tested'''
: XDS.a Integrated Source/Repository

'''Dependencies'''
: None

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Integrated Source/Repository Actor'''

# Submit a Document with Submission Set to the Public Registry at EndPoint <nowiki>https://129.6.24.109:9443/axis2/services/registryAonedoc</nowiki>
# Submit your results as described [[#Uploading_test_log_reference|here]].

'''Evaluation''' by the Public Registry
# [[#Schema|Schema]]
# [[#Metadata_Validator|Metadata Validator]]
# TLS secure connection used

==  12053 == 

'''Register One Document via XDS.b with mutual TLS'''

Verify that the XDS.b Integrated Source/Repository can register a document over mutual TLS.

'''References'''
: ITI TF-2 3.42
: ITI TF-2 3.19

'''Actors Tested'''
: XDS.b Integrated Source/Repository

'''Dependencies'''
: None

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Integrated Source/Repository Actor'''

# Submit a Document with Submission Set to the Public Registry at EndPoint <nowiki>https://129.6.24.109:9443/axis2/services/registryBonedoc</nowiki>
# Submit your results as described [[#Uploading_test_log_reference|here]].

'''Evaluation''' by the Public Registry
# [[#Schema|Schema]]
# [[#Metadata_Validator|Metadata Validator]]
# TLS secure connection used

==  12054 == 

'''Register Two Documents via XDS.a'''

Verify that the XDS.a Integrated Source/Repository can register two documents in a single submission set.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: XDS.a Integrated Source/Repository

'''Dependencies'''
: None

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Integrated Source/Repository Actor'''

# Submit a Document with Submission Set to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/registryA2doc</nowiki>
# Submit your results as described [[#Uploading_test_log_reference|here]].

'''Evaluation''' by the Public Registry
# [[#Schema|Schema]]
# [[#Metadata_Validator|Metadata Validator]]

==  12055 == 

'''Register Two Documents via XDS.b'''

Verify that the XDS.b Integrated Source/Repository can register two documents in a single submission set.

'''References'''
: ITI TF-2 3.41

'''Actors Tested'''
: XDS.b Integrated Source/Repository

'''Dependencies'''
: None

'''You will need to'''
: [[#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Integrated Source/Repository Actor'''

# Submit a Document with Submission Set to the Public Registry at EndPoint <nowiki>http://129.6.24.109:9080/axis2/services/registryB2doc</nowiki>
# Submit your results as described [[#Uploading_test_log_reference|here]].

'''Evaluation''' by the Public Registry
# [[#Schema|Schema]]
# [[#Metadata_Validator|Metadata Validator]]

== 12083 ==

'''Accept Retrieve Document Set by Integrated Source/Repository – retrieve one document over TLS'''

Verify that the XDS.b Integrated Document Source/Repository can properly respond to a [[XDS_Transactions#Retrieve_Multiple_Documents|Retrieve Multiple Documents transaction]] requesting one document when the connection is over a TLS channel. 

'''References'''
: ITI TF-2 3.43

'''Actors Tested'''
: Integrated Source/Repository

'''Dependencies'''
: Test 12038 establishes the test data need to run this test

'''You will need to'''

'''Resources'''
: tests/12038 section of [[XDS_Test_Kit_Download|test kit]] 

'''Testing Integrated Source/Repository Actor'''

The detailed instructions are found in tests/12083/readme.txt.  The overview is to re-run test 12038 over TLS. 

== 12084 == 

'''Submission Stored - All or Nothing (XDS.b)'''

A submission including a Submission Set and two documents is submitted to the Registry.  One of the two documents is missing the repositoryUniqueId attribute and will therefore cause an error.  A stored query is then used to verify that no Submission Set nor documents are stored in the registry with status Approved.

'''References'''
: ITI TF-2 3.42

'''Actors Tested'''
: XDS.a Document Registry

'''Dependencies'''
: None

'''You will need to'''
: None

'''Resources'''
: tests/12084 section of [[XDS_Test_Kit_Download|test kit]] which has two sections, ''submit'' and ''eval''


'''Testing Document Registry Actor'''


# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''submit'' sub-directory to perform the submission to your Registry. An error is expected.
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan in the ''eval'' sub-directory to query and evaluate your Registry's contents. 
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
# [[#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]  of both ''submit'' and ''eval'' parts of the test


'''Evaluation''' by xdstest2
# The xdstest2 tool will verify that:
: the submission failed 
: the query returns no Submission Set or Documents

==  12085 == 

'''Provide and Register (XDS.a) with mutual TLS'''

Repeat any Provide and Register test with mutual TLS enabled.

==  12086 == 

'''Provide and Register-b (XDS.b) with mutual TLS'''

Repeat any Provide and Register-b test with mutual TLS enabled.

== 12087 ==

'''Demonstrate use of at least one Stored Query'''

Demonstrate that your Document Consumer actor can successfully use a Stored Query to query the Public Registry.

'''References'''
: ITI TF-2 3.18

'''Actors Tested'''
: Document Consumer

'''Dependencies'''
: Test [[#11710|11710]] must be run before this test

'''You will need to'''

'''Resources'''
: [[#Test_Data_Description|Test Data Description]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Consumer Actor'''

# Using your Document Consumer actor implementation, use a pre-defined XDS Stored Query to retrieve metadata  from the Public Registry. You must select from the pre-loaded metadata defined in the [[#Test_Data_Description|Test Data Description]].
# Upon success, find your test entry using the [[XDS_Test_Log_Browser|XDS Test Log Browser]] and log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].

== 12318 ==
'''Receiving Gateway Test initialization'''

Establish test data in systems behind Receiving Gateway. There are two sets of instructions.

==== Receiving Gateway has no Registry behind it ====

These instructions apply to Receiving Gateways that do not have an XDS Affinity domain (and therefore an XDS Registry and Repository actors) behind them. This test data must have the following characteristics:
* Single Patient ID
* Metadata for two documents
** Metadata coding shall conform to Public Registry Affinity Domain [[XDS_Main_Page#Configuration_and_Change_Log|configuration]] 
** Metadata is required to conform to Schema and Metadata requirements as evaluated by [http://ihexds.nist.gov:9080/xdstools/jsp/validationService/index.jsp Metadata Validator tool].
** Must be returned consistently for each Cross Gateway Query request (metadata for a document is static)
*  Two documents matching metadata
** uniqueId of document matches metadata XDSDocumentEntry object
** Size, hash, and mimeType attributes in metadata must match document content
** MimeType must be renderable in a typical web browser without special plugins. If mimeType if text/xml then style sheet must be exist, document must have appropriate processing instruction referencing style sheet, and style sheet must be reference-able. (in other words, text/xml must display through style sheet) 

==== Receiving Gateway has a Registry behind it ====

This test also applies to the Public Registry. The section testdata/12318 of the testkit contains the necessary submission to initialize this data.  This has been used to initialize the Public Registry. Initiating Gateway tests reference this data. If you have a Registry behind your Receiving Gateway you can create the test data as described in the previous section or use the testdata/12318 section of the test kit. If you use the test kit, configure the test by inserting your own endpoint into the <RegistryEndpoint/> element.

The test kit data contains two documents with metadata.  One document is simple test (about 5 lines) and the second is a Patient Summary Record.

==== Test 12318 Patient ID ====
'''Current Patient ID in the Public Registry'''
Currently, this test data is available in the Public Registry under Patient ID e3448eae0e1f424^^^&1.3.6.1.4.1.21367.2008.2.1&ISO. This may change over time as improvements to the test data are made.

'''References'''
: ITI TF-2 3.38 and ITI TF-2 3.39

'''Actors Tested'''
: None

'''Dependencies'''
: None

'''Resources'''
: None


'''Test Procedure'''
: None

== 12309 ==
'''FindDocuments XGQ for ObjectRef'''

Receiving Gateway accepts FindDocuments Cross Gateway Query requesting ObjectRefs be returned. ObjectRefs are simple references to XDS Metadata objects.  They are small, in their XML form, and easy to pass even when large number of objects must be listed.

'''References'''
: ITI TF-2 3.38

'''Actors Tested'''
: Receiving Gateway

'''Dependencies'''
: Test [[#12318|12318]] must be run before this test

'''Resources'''
: tests/12309 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Testing_Introduction#Server_Testing|xdstest2 testing tool]]
: [[XDS_Main_Page#Testing_Tools|Other Testing Tools]]


'''Test Procedure'''

Submit a Cross Gateway Query transaction to your Receiving Gateway implementation using the xdstest2 tool.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan from the test kit to perform the Cross Gateway Query
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file.

== 12310 ==
'''FindDocuments XGQ for LeafClass'''

Receiving Gateway accepts FindDocuments Cross Gateway Query requesting LeafClass be returned. A LeafClass request returns the full XDS Metadata for the objects identified in the query. Requesting too may objects in this form can lead to XML processing issues.

'''References'''
: ITI TF-2 3.38

'''Actors Tested'''
: Receiving Gateway

'''Dependencies'''
: Test [[#12318|12318]] must be run before this test

'''Resources'''
: tests/12310 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Testing_Introduction#Server_Testing|xdstest2 testing tool]]
: [[XDS_Main_Page#Testing_Tools|Other Testing Tools]]


'''Test Procedure'''

Submit a Cross Gateway Query transaction to your Receiving Gateway implementation using the xdstest2 tool.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan from the test kit to perform the Cross Gateway Query
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file.

== 12311 ==
'''GetDocuments XGQ for LeafClass'''

Receiving Gateway accepts GetDocuments Cross Gateway Query requesting LeafClass be returned. A FindDocuments query has already been run (test 12309) and returned ObjectRefs matching a particular Patient Id. This query retrieves metadata for one or more documents discovered through the FindDocuments query.

A LeafClass request returns the full XDS Metadata for the objects identified in the query. Requesting too may objects in this form can lead to XML processing issues.

'''References'''
: ITI TF-2 3.38

'''Actors Tested'''
: Receiving Gateway

'''Dependencies'''
: Test [[#12318|12318]] must be run before this test
: Test [[#12309|12309]] must be run before this test

'''Resources'''
: tests/12311 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Testing_Introduction#Server_Testing|xdstest2 testing tool]]
: [[XDS_Main_Page#Testing_Tools|Other Testing Tools]]


'''Test Procedure'''

Submit a Cross Gateway Query transaction to your Receiving Gateway implementation using the xdstest2 tool.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan from the test kit to perform the Cross Gateway Query
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file.

== 12312 ==
'''Cross Gateway Retrieve'''

A Cross Gateway Retrieve transaction is sent to the Receiving Gateway being tested. The parameters of the retrieve are taken from metadata returned in test [[#12311|12311]]. 

'''References'''
: ITI TF-2 3.39

'''Actors Tested'''
: Receiving Gateway

'''Dependencies'''
: Test [[#12311|12311]] must be run before this test

'''Resources'''
: tests/12312 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Testing_Introduction#Server_Testing|xdstest2 testing tool]]
: [[XDS_Main_Page#Testing_Tools|Other Testing Tools]]


'''Test Procedure'''

Submit a Cross Gateway Retrieve transaction to your Receiving Gateway implementation using the xdstest2 tool.
# [[#Configuring_and_running_the_TestPlan|Configure and run]] the test plan from the test kit to perform the Cross Gateway Query
# [[#Evaluating_the_results_of_the_TestPlan|Evaluate]] the results.
#[[#Log_Results_of_Register_transaction_against_your_Registry|Log the results]]. You need to return the log.xml file.

== 12300 ==
'''FindDocuments XGQ for LeafClass'''

An Initiating Gateway actor implementation issues a FindDocuments Cross Gateway Query (XGQ) to the Public Registry's Receiving Gateway requesting LeafClass (full metadata) be returned.

'''References'''
: ITI TF-2 3.38

'''Actors Tested'''
: Initiating Gateway

'''Dependencies'''
: [[XDS_Main_Page#Public_Registry|Public Registry Server]]

'''Resources'''
: [[#12318|Test Data Description (test 12318)]]
: Current Patient ID to use is documented [[Test 12318 Patient ID|here]].
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]
: Example Cross Gateway Query request in examples/12300/testplan.xml (contents of /TestPlan/TestStep/StoredQueryTransaction/Metadata element). For help interpreting the test plan look [[Xdstest2_testing_tool#Understanding_a_TestPlan|here]].
: [[XDS_Main_Page#Testing_Tools|Testing Tools]] (see Test Kit Download)


'''Test Procedure'''

# Configure your Initiating Gateway to send Cross Gateway Query transactions to EndPoint http://129.6.24.109:9080/axis2/services/test12300 on the Public Registry Server
# Issue a FindDocuments XGQ with
#* returnType = LeafClass
#* no home attribute (documented in profile as homeCommunityId)
#* Patient ID to use is documented [[Test 12318 Patient ID|here]].
# You must receive back 2 ExtrinsicObject elements (XDSDocumentEntry objects)
# Upon success, find your test entry on the Public Registry Server using the [[XDS_Test_Log_Browser|XDS Test Log Browser]] and log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].

== 12301 ==
'''Cross Gateway Retrieve of a single document'''

Issue Cross Gateway Retrieve for a single document based on metadata returned in test 12300. This is done twice. First time request is sent to Public Registry endpoint that returns MTOM/XOP coded documents.  Second time request is sent to endpoint that returns MTOM coded documents.

'''References'''
: ITI TF-2 3.39

'''Actors Tested'''
: Initiating Gateway

'''Dependencies'''
: [[XDS_Main_Page#Public_Registry|Public Registry Server]]

'''Resources'''
: Metadata returned from [[#12300|test 12300]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]
: Example Cross Gateway Retrieve request in examples/12098/testplan.xml (contents of /TestPlan/TestStep/RetrieveTransaction/Metadata element) in [[XDS_Main_Page#Testing_Tools|Testing Tools]] (see Test Kit Download). For help interpreting the test plan look [[Xdstest2_testing_tool#Understanding_a_TestPlan|here]].

'''Test Procedure'''
# After successfully executing [[#12300|test 12300]], extract from the results
#* home attribute (documented as homeCommunityId)
#* XDSDocumentEntry.uniqueId attribute from one of the documents returned in metadata
#* XDSDocumentEntry.repositoryUniqueId attribute from the same document
# Configure your Initiating Gateway to send Cross Gateway Retrieve transactions to EndPoint http://129.6.24.109:9080/axis2/services/rg on the Public Registry Server. This endpoint returns MTOM/XOP coded documents.
# Issue a Cross Community Retrieve transaction with the above 3 attributes
# Verify that 1 document is returned
# Repeat the above instructions using endpoint http://129.6.24.109:9080/axis2/services/rgnoopt. This will return documents coded via MTOM. 
# Upon success, for both Cross Gateway Retrieves, find your test entries on the Public Registry Server using the [[XDS_Test_Log_Browser|XDS Test Log Browser]] and log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].


== 12320 ==
'''Registry SOAP Pattern'''

Test an XDS.b Document Registry implementation to prove it can accept a SIMPLE SOAP message.  This message type is use for both the Stored Query and Register.b transactions.

'''References'''
: ITI TF-2 3.18 and 3.41

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: [[XDS_Main_Page#Public_Registry|Public Registry Server]]

'''Resources'''
: tests/12320 from testkit
[[XDS_Main_Page#Testing_Tools|Testing Tools]] (see Test Kit Download). For help interpreting the test plan look [[Xdstest2_testing_tool#Understanding_a_TestPlan|here]].

'''Test Procedure'''
# Using xdstest tool, run the testplan in tests/12320.  It will send a SQ request to your registry. To pass the test, your registry must return a properly formatted SOAP response.
# log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].

== 12321 ==
'''Repository SOAP Pattern'''

Test an XDS.b Document Repository implementation to prove it can accept an Optimized MTOM/XOP and Unoptimized MTOM/XOP SOAP messages.  These message types are used for both the Provide and Register-b and Retrieve Multiple Documents transactions.

'''References'''
: ITI TF-2 3.41 and 3.43

'''Actors Tested'''
: Document Repository

'''Dependencies'''
: [[XDS_Main_Page#Public_Registry|Public Registry Server]]

'''Resources'''
: tests/12321 from testkit
[[XDS_Main_Page#Testing_Tools|Testing Tools]] (see Test Kit Download). For help interpreting the test plan look [[Xdstest2_testing_tool#Understanding_a_TestPlan|here]].

'''Test Procedure'''
# Using xdstest tool, run the testplan in tests/12321.  It will send both an Optimized MTOM/XOP and then an Unoptimized MTOM/XOP request to your repository. To pass the test, your repository must return a properly formatted SOAP response.
# log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].

== 12322 ==
'''Folder lastUpdateTime'''

Test an XDS.a Document Registry implementation to prove it can properly manage the XDSFolder.lastUpdateTime attribute.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: [[XDS_Main_Page#Public_Registry|Public Registry Server]]

'''Resources'''
: tests/12322 from testkit
[[XDS_Main_Page#Testing_Tools|Testing Tools]] (see Test Kit Download). For help interpreting the test plan look [[Xdstest2_testing_tool#Understanding_a_TestPlan|here]].

'''Test Procedure'''
# Using xdstest tool, run the testplan in tests/12322.  There are multiple sections.  The file tests/12322/readme.txt has the details.
# log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].


== 12323 ==
'''Folder lastUpdateTime'''

Test an XDS.b Document Registry implementation to prove it can properly manage the XDSFolder.lastUpdateTime attribute.

'''References'''
: ITI TF-2 3.42

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: [[XDS_Main_Page#Public_Registry|Public Registry Server]]

'''Resources'''
: tests/12323 from testkit
[[XDS_Main_Page#Testing_Tools|Testing Tools]] (see Test Kit Download). For help interpreting the test plan look [[Xdstest2_testing_tool#Understanding_a_TestPlan|here]].

'''Test Procedure'''
# Using xdstest tool, run the testplan in tests/12323.  There are multiple sections.  The file tests/12323/readme.txt has the details.
# log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].

== 12324 ==
'''Accept Document Replace, Document in Folder'''

A Document Registry (XDS.a), when accepting a Document Replace, must find all Folders the original document is a member of and add the replacement document to those folders.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: [[XDS_Main_Page#Public_Registry|Public Registry Server]]

'''Resources'''
: tests/12324 from testkit
[[XDS_Main_Page#Testing_Tools|Testing Tools]] (see Test Kit Download). For help interpreting the test plan look [[Xdstest2_testing_tool#Understanding_a_TestPlan|here]].

'''Test Procedure'''
# Using xdstest tool, run the testplan in tests/12324.  There are multiple sections.  The file tests/12324/readme.txt has the details.
# log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].


== 12325 ==
'''Add Existing document to existing folder'''

This test validates a Registry's ability to perform a basic Folder operation, adding a Document already in Registry to a Folder also already in Registry.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: [[XDS_Main_Page#Public_Registry|Public Registry Server]]

'''Resources'''
: tests/12324 from testkit
[[XDS_Main_Page#Testing_Tools|Testing Tools]] (see Test Kit Download). For help interpreting the test plan look [[Xdstest2_testing_tool#Understanding_a_TestPlan|here]].

'''Test Procedure'''
# Using xdstest tool, run the testplan in tests/12325.  There are multiple sections.  The file tests/12325/readme.txt has the details.
# log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].


== 12326 ==
'''Add Existing document to existing folder'''

This test validates a Registry's ability to perform a basic Folder operation, adding a Document already in Registry to a Folder also already in Registry.

'''References'''
: ITI TF-2 3.42

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: [[XDS_Main_Page#Public_Registry|Public Registry Server]]

'''Resources'''
: tests/12326 from testkit
[[XDS_Main_Page#Testing_Tools|Testing Tools]] (see Test Kit Download). For help interpreting the test plan look [[Xdstest2_testing_tool#Understanding_a_TestPlan|here]].

'''Test Procedure'''
# Using xdstest tool, run the testplan in tests/12326.  There are multiple sections.  The file tests/12326/readme.txt has the details.
# log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].

== 12327 ==
'''Accept Document Replace, Document in Folder'''

A Document Registry (XDS.b), when accepting a Document Replace, must find all Folders the original document is a member of and add the replacement document to those folders.

'''References'''
: ITI TF-2 3.42

'''Actors Tested'''
: Document Registry

'''Dependencies'''
: [[XDS_Main_Page#Public_Registry|Public Registry Server]]

'''Resources'''
: tests/12327 from testkit
[[XDS_Main_Page#Testing_Tools|Testing Tools]] (see Test Kit Download). For help interpreting the test plan look [[Xdstest2_testing_tool#Understanding_a_TestPlan|here]].

'''Test Procedure'''
# Using xdstest tool, run the testplan in tests/12327.  There are multiple sections.  The file tests/12327/readme.txt has the details.
# log it to Kudu using these [[#Log_Results_of_Query_or_Stored_Query_transactions_tested_against_the_Public_Registry|instructions]].

==  11742 == 

'''Generate Basic Transport - Document Source'''

Test basic transport mechanisms, HTTP and SOAP, for transferring metadata without mutual TLS authentication between a Document Source actor and the public repository. Document Source makes an HTTP connection to public repository. A simple SOAP package is transferred containing simple non-metadata XML.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Source

'''Testing Document Source Actor'''
# Configure the Document Source under test to send to the URL
#* <nowiki>http://hcxw2k1.nist.gov:8080/xdsServices2/registry/soap/test?testid=11742</nowiki>
# Have your Document Source send a SOAP over HTTP message with arbitrary content
# Verify that you get a valid SOAP message back, it may contain an error message from the repository. If you are using a SOAP parser to accept the response, the response will not parse correctly.  That is ok.  
# Results of this test should not be submitted.  It is for testing/debug of SOAP implemenations only.

==  11743 == 

'''Provide and Register (XDS.a) with mutual TLS'''

Repeat test [[#11746|11746]] with mutual TLS enabled.

== 11746 ==

'''Submit one document via XDS.a'''

Verify that the XDS.a Document Source can submit a single document via [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction.

'''References'''
: ITI TF-2 3.15

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''You will need to'''
: [[XDS_Test_Kit_2007-2008_Test_Descriptions#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[XDS_Test_Kit_2007-2008_Test_Descriptions#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: examples/11746 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Source Actor'''
# Configure your Document Source actor to submit to the Public Repository at EndPoint <nowiki>http://ihexds.nist.gov:9080/tf5/services/repositoryAonedoc</nowiki>
# Submit a [[Metadata_Patterns#Submission_Set_containing_a_Single_Document|Submission Set containing a single Document]] using the [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction 
# [[XDS_Test_Kit_2007-2008_Test_Descriptions#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]

== 12030 ==

'''Audit Logging of Provide and Register'''

Follow generic instructions found [[XDS_Test_Kit_2007-2008_Test_Descriptions#Syslog_Tests|here]]

== 11747 ==

'''Submit two documents via XDS.a'''

Verify that the XDS.a Document Source can submit [[Metadata_Patterns#Submission_Set_containing_Two_Documents|two documents]] together via the [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction.

'''References'''
: ITI TF-2 3.15

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''You will need to'''
: [[XDS_Test_Kit_2007-2008_Test_Descriptions#Allocating_new_Patient_IDs_for_Testing|Allocate a Patient ID]]
: [[XDS_Test_Kit_2007-2008_Test_Descriptions#Allocating_uniqueIDs_for_testing|Allocate unique IDs for Submission Set and Document objects]]

'''Resources'''
: examples/11747 section of [[XDS_Test_Kit_Download|test kit]]
: [[XDS_Test_Log_Browser|XDS Test Log Browser]]

'''Testing Document Source Actor'''
# Configure your Document Source actor to submit to the Public Repository at EndPoint <nowiki>http://ihexds.nist.gov:9080/tf5/services/repositoryA2doc</nowiki>
# Submit a [[Metadata_Patterns#Submission_Set_containing_Two_Documents|Submission Set containing two Documents]] using the [[XDS_Transactions#Provide_and_Register_Document_Set|Provide and Register Document Set]] transaction 
# [[XDS_Test_Kit_2007-2008_Test_Descriptions#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository|Log the results]]

==  11748 == 

'''Replace Existing Document'''

Verify that Document Source can issue a document replacement. To replace a document, an original document must be discovered through a query. Its UUID must be extracted from the query results. The new document is composed along with a RPLC Association to link the new document to the old.  The registry adaptor takes responsibility for deprecating the old document. More specifically, the following must be composed in a submission:
* an XDSSSubmissionSet object
* an XDSDocumentEntry object
* a HasMember Association linking Submission Set to the Document
* a RPLC Association linking the new Document to the existing document being replaced 
* An ObjectRef pointing to the document being replaced 
There must also be a single document included in the submission as an attachment.

'''References'''
: ITI TF-2 3.14

'''Actors Tested'''
: Document Source

'''Dependencies'''
: None

'''Testing Document Source Actor'''
# Allocate a new patient ID and uniqueIDs (see [[XDS_Test_Kit_2007-2008_Test_Descriptions#Using_the_Public_Registry]])
# Create a Document to be replaced. Test [[#11746 | 11746]] can be used.
# Using a query of your choice, discover the UUID of the Document to be replaced
# Compose metadata to perform the replacement.
#* Set the patientId on the Submission Set and document
#* Set uniqueIds in all objects as needed
#* Set the targetObject attribute on the RPLC Association object to the UUID of the document submitted by 11746
#* Add an ObjectRef for the UUID of the document to indicate that an object already in the registry is being referenced
#* An example is found in the test kit in examples/11748
# Configure the Document Source under test to send to the URL
#* <nowiki>http://ihexds.nist.gov:9080/tf5/services/test11748</nowiki>
# Have your Document Source send the metadata and replacement document
# Verify that you get a successful RegistryResponse message in return
# Log the results: [[XDS_Test_Kit_2007-2008_Test_Descriptions#Log_Results_of_Provide_and_Register_or_Register_transaction_tested_against_the_Public_Registry_Repository]]

==  11750 == 

'''Submit Transformation for Existing Document'''

It is not necessary for Document Sources or Document Repositories to demonstrate this test.  Once test [[#11748]] has been successfully passed, this test will automatically be passed as well.
