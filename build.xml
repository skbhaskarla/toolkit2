<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="war" name="toolkit" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- To build toolkit ...

		* (Optional but ensures best results) In Eclipse: Project > clean and build
 
 		* (Optional but ensures best results) ant clean
 
		* ant war-prep  (prep everything for next step) - this builds the default war structre and compiles all the Java
		
		* GWT compile (run in Eclipse)
			menu option is labeled:  GWT Compile Project ...
			This is only necessary if you are trying to generate a war file for deployment to tomcat.  If you
			just want to run in the debugger, the ant war-prep is enough 
		
		* ant ttt (or ant ihe) builds war file ttt.war (or xdstools2.war) appropriate for the named project
                        The difference is the copy of war/WEB-INF/toolkit.properties installed

	  The result is the file xdstools2/ttt.war (or xdstools2/xdstools2.war)
	  If ant ttt is run then a second file is generated, listener.jar which contains the port 25 listener for T3
          It must be installed on hit-testing using scripts. The procedure is:
		1) scp listener.jar bill@hit-testing
		2) ssh bill@hit-testing
			3) cd bin
			4) screen -ls    // to get id of service
			5) screen -d -r <id>   // to bring service into foreground
			6) ^c                  // to kill it
			7) ./prep-listener.sh   // to build ~/bin/listener directory contents (port 25 listener)
			8) ./start-screen.sh	// to start listener using screen(1) command
			9) log4j output goes to ~/ttt/webapps/ROOT/direct/listener_log.txt

-->

	<!--
	Be careful when adding new classes or dependencies between classes.  Eclipse will compile all the sub-projects
	in one big build thus ignoring the dependencies.  This ant script builds things in order. It is 
	very easy to introduce forward references that cannot be resolved.
-->
	<!-- TO FIX THIS PROBLEM, WE COULD IVY DEPENDENCY RESOLUTION MECHANISM -->

	<property name="sub-projects" value="
		dns,
		docref,
		timer,
		common-datatypes,
		error-recording,
		message-dispatch,
		xds-exceptions,
		utilities,
		common,
		actor-transaction,
		tk,
		installation,
		email,
		registry-support,
		testkit-utilities,
		registry-metadata,
		site-management,
		http,
		security-common,
		dsig,
		validators-support,
		saml,
		soap,
		validators-ccda,
		registry-metadata,
		registry-msg-formats,
		validators-registry-metadata,
		message-validator-factory2,
		validators-registry-message,
		direct,
		validators-direct-factory,
		envSettings,
		sim-common,
		results,
		direct-support,
		simDb,
		xdstest2-logging,
		actorfactory,
		xdstest2,
		session,
		xdstest-gui,
		simulators,
		direct-sim,
		direct-listener,
		xdstools2
	" />

	<!-- Outside dependencies -->
	<!-- TO BE CHANGED. We still expect to find the librairies directory one level above  -->
	<property name="shared.lib.dir" location="../shared-lib/lib" />
	<property name="shared.mar.dir" location="../shared-lib/mar" />

	<!-- main directories -->
	<property name="toolkit.home" location="${basedir}" />
	<property name="staging.area" location="xdstools2" />

	<!-- output directories -->
	<property name="war.dir" location="xdstools2/war" />
	<property name="war.lib.dir" location="${war.dir}/WEB-INF/lib" />
	<property name="war.classes.dir" location="${war.dir}/WEB-INF/classes" />

	<!-- define the different artifacts name -->
	<property name="jar.name" value="toolkit.jar" />
	<property name="war.name" value="xdstools2.war" />

	<!-- toolkit admin properties file-->
	<property name="config.file" value="toolkit.properties" />
	<property file="${config.file}" prefix="user" />

	<!-- we ship the toolkit with a default_cache -->
	<property name="default_cache.dir" location="${staging.area}/default_cache" />

	<!-- local cache of the libs -->
	<property name="lib.dir" location="lib" />

	<!-- all compiled sources are placed there -->
	<property name="build.dir" location="build" />
	
	<!-- target repository where artifacts are put-->
	<property name="target.dir" location="." />

	<!-- properties used by the compiler -->
	<property name="source" value="1.6" />
	<property name="target" value="1.6" />
	<property name="compile.excludes" value="" />

	<!-- those are all the directories containing GWT sources -->
	<property name="xdstools2.src.dir" location="xdstools2/src" />
	<property name="sim-common.src.dir" location="sim-common/src" />
	<property name="xdstest-gui.src.dir" location="xdstest-gui/src" />
	<property name="testengine.src.dir" location="xdstest2/src" />
	<property name="site-management.src.dir" location="site-management/src" />
	<property name="validators-support.src.dir" location="validators-support/src" />
	<property name="registry-msg-formats.src.dir" location="registry-msg-formats/src" />
	<property name="error-recording.src.dir" location="error-recording/src" />
	<property name="registry-metadata.src.dir" location="registry-metadata/src" />
	<property name="common-datatypes.src.dir" location="common-datatypes/src" />
	<property name="actor-transaction.src.dir" location="actor-transaction/src" />
	<property name="direct-sim.src.dir" location="direct-sim/src" />
	<property name="tk.src.dir" location="tk/src" />
	<property name="results.src.dir" location="results/src" />
	<property name="actorfactory.src.dir" location="actorfactory/src" />
	<property name="http.src.dir" location="http/src" />

	<!-- antlib is bundled with the 3rd party librairies.
	Since the lib.dir might not be initialized or could be cleaned-up,
	we get the definition of antlib from the shared.lib.dir -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${shared.lib.dir}/ant-contrib.jar" />
		</classpath>
	</taskdef>
	
	<!-- classpath -->
	<path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc">
		<classpath refid="classpath" />
	</taskdef>
	
	
	
    <!-- ================================================= 
          This section downloads, installs and configures ivy.
          It seems the easier and less intrusive way to get ivy in shared-libs.               
         ================================================= -->
	
	
    <property name="ivy.install.version" value="2.3.0" />
    <property name="ivy.jar.dir" location="${shared.lib.dir}" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-2.3.0.jar" />

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
    	<taskdef resource="org/apache/ivy/ant/antlib.xml"
    	                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    	
	<!-- we use a custom ivysettings file -->
    		<property name="ivy.settings.dir" location="." />
    		<ivy:settings file="${ivy.settings.dir}/ivysettings.xml" />
    	
    </target>


	
    <target name="resolve" description="--> retrieve dependencies with ivy" depends="init-ivy">
    	<ivy:cleancache />
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact].[ext]"  />
    </target>
	
    <!-- ================================================= 
         target: clean        
         ================================================= -->
	
	<target name="clean">
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}" includes="**/*">
			</fileset>
		</delete>
		<ant antfile="${staging.area}/build-war.xml" target="clean" />
	</target>
	
    <!-- ================================================= 
         target: prepare
         ================================================= -->
	<!-- Prepare the build. 
	quick fix, waiting for full ivy dependency management : all shared-libs copied in lib directory. 
	creates various directories we need.
	-->
	<target name="prepare" >
		<mkdir dir="${build.dir}" />
		<mkdir dir="${lib.dir}" />
		<mkdir dir="${war.dir}" />

		<copy todir="${lib.dir}">
			<fileset dir="${shared.lib.dir}">
				<exclude name="antlib.jar" />
				<exclude name="ivy.2.3.0.jar" />
			</fileset>
		</copy>
		<!-- TODO check if we need that -->
		<copy todir="${lib.dir}">
			<fileset dir="${shared.mar.dir}" />
		</copy>
	</target>

    <!-- ================================================= 
         target: compile
         ================================================= -->
	<!-- each sub-projects build its own sources in the build directory-->
	<target name="compile" depends="prepare">
		<for param="sub-build" list="${sub-projects}" trim="true">
			<sequential>
				<echo>   from @{sub-build}</echo>
				<ant dir="@{sub-build}" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="compile" />
			</sequential>
		</for>
	</target>

	
    <!-- ================================================= 
         target: jar
         ================================================= -->
	<!-- jar all the .class files and put the jar in ${war.lib.dir}.-->
	<target name="jar">
		<jar jarfile="${war.lib.dir}/${jar.name}" basedir="${build.dir}/">
		</jar>
	</target>

    <!-- ================================================= 
         target: gwt-compile
         ================================================= -->
	<!-- invoke the GWT compiler to generate the javascript.
		The compiler expects a war folder to exists and add folders and files to it.
		 -->
	<target name="gwt-compile">
		<ant antfile="${staging.area}/build-war.xml" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="gwt-compile" />
	</target>

	<!-- This target bypasses GWT-compile. Useful for debugging within Eclipse -->
	<target name="war-prep" depends="compile">
		<ant antfile="${staging.area}/build-war.xml" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="war-prep" />
	</target>
	
	<!-- This target bypasses GWT-compile. Useful to build the war if gui did not change -->
	<target name="war-no-gwt-compile" depends="compile, war-prep">
		<ant antfile="${staging.area}/build-war.xml" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="war" />
	</target>
	
	<target name="war" depends="compile, gwt-compile, war-prep">
		<ant antfile="${staging.area}/build-war.xml" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="war" />
	</target>

	
	
	    <!-- ================================================= 
	          convenience methods for different configurations              
	         ================================================= -->

	    <!-- ================================= 
	          target: ttt              
	         ================================= -->
	<target name="ttt" depends="compile">
		<ant antfile="${staging.area}/build-war.xml" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="ttt" />
	</target>
	
		    <!-- ================================= 
	          target: ihe              
	         ================================= -->
		<target name="ihe" depends="compile">
		<ant dir="xdstools2" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="ihe"/>
	</target>

		    <!-- ================================= 
	          target: compile-direct-faq            
	         ================================= -->
	<!-- generate documentation -->
	<target name="compile-direct-faq">
		<ant dir="direct-faq" target="compile" />
	</target>

</project>
