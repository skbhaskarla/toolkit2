Adding a validator

The Message Validator portion of the XDS Toolkit is intended to be flexible and extendible.  
This file documents its structure and ways to extend it.

All the code for the validator exists in the common library.

The call chain starts in the server side interface to the gui
xdstools2/src/gov/nist/registry/xdstools2/server/ToolkitServerImpl.java#validateMessage

where the following code is found:

	public MessageValidationResults validateMessage(ValidationContext vc, String simFileName) {
		try {
			ValidateMessage vm = new ValidateMessage(this);
			MessageValidationResults mvr = vm.validateMessageFile(vc, simFileName);
			return mvr;
	...
	
Important pieces are:
	ValidationContext class - a collection of boolean variables that identify the 
	validation to be performed.  They correspond roughly to the buttons available on 
	the Message Validation page.  Definition found at:
	common/src/gov/nist/registry/common2/registry/datatypes/client/ValidationContext.java
	
	ValidateMessage class - which builds an error recorder builder (factory class that
	will build a new error storage class on demand).  Each one of these error storage
	containers corresponds to one section on the results display. Since the validation
	will proceed in a recursive kind of way, it is unknown how many of these containers will
	be needed in the end so they are created dynamically.
	
	The validation proceeds depending on two inputs:  which method in this class is 
	invoked (each method supports a different kind of input: file upload vs captured through 
	HTTP message) and the settings in the ValidationContext. Assuming we are following
	the thread of a message received over HTTP connection ...
	
	An instance of HttpMessageValidator is built 
	(common/src/gov/nist/registry/common2/registry/validation/message/HttpMessageValidator.java)
	which performs the HTTP parsing and schedules the SOAP parser though the interfaces
	of MessageValidatorContext.
	
	MessageValidatorContext is a container class that keeps a list of validation steps.  So
	running a pre-programmed validation just means iterating through the contents of this
	class and executing each step. The method run() is built just for that purpose.
	(common/src/gov/nist/registry/common2/registry/validation/message/MessageValidationContext.java)
	
	Up until now the overall logic is simple.  Every message has a HTTP wrapper followed
	by an inner SOAP wrapper.  What is inside the SOAP wrapper will be different for 
	every message type.  The HttpMessageValidator schedules the SimpleSoapMessageValidator,
	for example, to 1) do the SOAP validation and 2) figure out what is inside
	the SOAP wrapper. This 'figure out what comes next' part is isolated in the factory
	class MessageValidatorFactory.  
	(common/src/gov/nist/registry/common2/registry/validation/message/SimpleSoapMessageValidator.java)
	
	The MessageValidatorFactory has a bunch of static methods that differ based on 
	the parameters passed (mostly).  So in some cases the input is already parsed
	as XML and other times the input string needs XML parsing.  Flexiblity is sooooo
	important. One method inspects the metadata wrapper (child of SOAP Body element) to try
	to figure out which validator to schedule next (remember that this tool sometimes is
	run without having access to the SOAP Header where the ws:action is kept). Another run
	approach is based on the ValidationContext object which might force a particular validation 
	(this is supposed to be a Stored Query result ..).
	
	Along the way, several other validators are added to the schedule. These include 
	schema validation, metadata wrapper validation, metadata element ordering validation
	(a separate validator since the schema output for this type of error is so 
	horrible that no one understands it. The dedicated scanner/validator is capable
	of generating humanly readable messages, I hope.)
	
	One way through this factory class leads to the use of the class SoapMessageValidator
	which inspects the WS:Action field and schedules further validators based on the value.
	It scans the ws:action, fills in the ValidationContext structure based on the findings,
	and then calling MessageValidatorFactory.validateBasedOnValidationContext() to 
	schedule more detail validators based on the newly updated ValidationContext.
	

So, how would a new validator be constructed?  First, the class ValidationContext would 
have a boolean flag added for the new type and several of its methods would be 
extended to consider the new boolean flag when making decisions like - has a type
been selected.  This is rather straight forward.  

Next, several parts of MessageValidatorFactor would be extended so that the giant if-then
blocks consider the new type.

A new message validator class is constructed so that the above sections of 
MessageValidatorFactory have something to call to do the actual validations.

Each message validator class, MetadataMessageValidator is one example, extend the
MessageValidator base class. The constructor has one of two patterns:
- two parameters: ValidationContext and message description in its natural format (so far
all of mine are XML - your milage may vary, see dealer for detail)
- an extended collection of parameters that allows the validator to schedule other
slave validators.  An example of this style is found in class RetrieveRequestValidator.

When writing the validator, all errors are recorded through the ErrorRecorder interface. 
There are several actual classes that implement this interface.  One of them knows how to
format the results so they can be passed to the GUI interface I use which is built on top
of Google's GWT (Google Web Toolkit).