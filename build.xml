<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="tkbuild" name="toolkit">

	<!-- To build toolkit ...

		* (Optional but ensures best results) In Eclipse: Project > clean and build
 
 		* (Optional but ensures best results) ant clean
 
		* ant war-prep  (prep everything for next step) - this builds the default war structre and compiles all the Java
		
		* GWT compile (run in Eclipse)
			menu option is labeled:  GWT Compile Project ...
			This is only necessary if you are trying to generate a war file for deployment to tomcat.  If you
			just want to run in the debugger, the ant war-prep is enough 
		
		* ant ttt (or ant ihe) build war file ttt.war (or xdstools2.war) appropriate for the named project
                        The difference is the copy of war/WEB-INF/toolkit.properties installed

	  The result is the file xdstools2/ttt.war (or xdstools2/xdstools2.war)
	  If ant ttt is run then a second file is generated, listener.jar which contains the port 25 listener for T3
          It must be installed on hit-testing with the help of some scripts.  The procedure is:
		1) scp listener.jar bill@hit-testing
		2) ssh bill@hist-testing
			3) cd bin
			4) screen -ls    // to get id of service
			5) scrren -d -r <id>   // to bring service into forground
			6) ^c                  // to kill it
			7) ./prep-listener.sh   // to build ~/bin/listener directory contents (port 25 listener)
			8) ./start-screen.sh	// to start listener using screen(1) command
			9) log4j output goes to ~/ttt/webapps/ROOT/direct/listener_log.txt

-->

	<!--
	Be careful when adding new classes or dependencies between classes.  Eclipse will compile all the sub-projects
	in one big build thus ignoring the dependencies.  This ant script builds things in order shown below. It is 
	very easy to introduce forward references that cannot be resolved.  A better solution is needed for
	modularation but for now...
-->
	<!-- TO FIX THIS PROBLEM, WE COULD EITHER USE IVY, OR LOOP THROUGH ALL SOURCES AND ADD THEM TO THE CLASSPATH 
	THUS EMULATING WAS ECLISPE DOES -->

	<property name="sub-projects" value="
		docref,
		common-datatypes,
		error-recording,
		xds-exceptions,
		utilities,
		common,
		actor-transaction,
		installation,
		tk,
		email,
		registry-support,
		testkit-utilities,
		registry-metadata,
		site-management,
		http,
		security-common,
		dsig,
		saml,
		soap,
		validators-support,
		validators-ccda,
		registry-metadata,
		registry-msg-formats,
		validators-registry-metadata,
		message-validator-factory2,
		direct,
		validators-registry-message,
		envSettings,
		sim-common,
		results,
		direct-support,
		simDb,
		xdstest2-logging,
		xdstest2,
		actorfactory,
		session,
		xdstest-gui,
		simulators,
		direct-sim,
		direct-listener,
		xdstools2
	" />

	<property name="toolkit.home" location="${basedir}" />

	<!-- define the different artifacts name -->
	<property name="jar.name" value="toolkit.jar" />
	<property name="war.name" value="toolkit.war" />

	<!-- Outside dependencies -->
	<!-- TO BE CHANGED. We still expect to find the librairies directory one level above  -->
	<property name="shared.lib.dir" location="../shared-lib/lib" />
	<property name="shared.mar.dir" location="../shared-lib/mar" />

	<property name="testkit.dir" location="../testkit" />

	<!-- local cache of the libs -->
	<property name="lib.dir" location="lib" />

	<!-- all compiled sources are placed there -->
	<property name="build.dir" location="build" />

	<!-- output directories -->
	<property name="war.dir" location="war" />
	<property name="war.lib.dir" location="${war.dir}/WEB-INF/lib" />

	<!-- properties used by the compiler -->
	<property name="source" value="1.6" />
	<property name="target" value="1.6" />
	<property name="compile.excludes" value="" />

	<!-- properties used to create the listener -->
	<property name="direct-host" value="hit" />
	<property name="direct-port" value="25" />

	<!-- those are all the directories containing GWT sources -->
	<property name="xdstools2.src.dir" location="xdstools2/src" />
	<property name="sim-common.src.dir" location="sim-common/src" />
	<property name="xdstest-gui.src.dir" location="xdstest-gui/src" />
	<property name="testengine.src.dir" location="xdstest2/src" />
	<property name="site-management.src.dir" location="site-management/src" />
	<property name="validators-support.src.dir" location="validators-support/src" />
	<property name="registry-msg-formats.src.dir" location="registry-msg-formats/src" />
	<property name="error-recording.src.dir" location="error-recording/src" />
	<property name="registry-metadata.src.dir" location="registry-metadata/src" />
	<property name="common-datatypes.src.dir" location="common-datatypes/src" />
	<property name="actor-transaction.src.dir" location="actor-transaction/src" />
	<property name="direct-sim.src.dir" location="direct-sim/src" />
	<property name="tk.src.dir" location="tk/src" />
	<property name="results.src.dir" location="results/src" />
	<property name="actorfactory.src.dir" location="actorfactory/src" />

	<!-- antlib is bundled with the 3rd party librairies -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${lib.dir}/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- classpath -->
	<path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="clean">
		<ant file="build-war.xml" target="clean" />
	</target>

	<!-- Prepare the build. 
	quick fix, waiting for full ivy dependency management : all shared-libs copied in lib directory. 
	creates various directories.
	-->
	<target name="prepare">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${lib.dir}" />

		<copy todir="${lib.dir}">
			<fileset dir="${shared.lib.dir}">
				<exclude name="antlib.jar" />
			</fileset>
		</copy>
		<!-- TODO check if we need that -->
		<copy todir="${lib.dir}">
			<fileset dir="${shared.mar.dir}" />
		</copy>
	</target>

	<!-- each sub-projects build its own sources in the build directory-->
	<target name="compile" depends="prepare">
		<for param="sub-build" list="${sub-projects}" trim="true">
			<sequential>
				<echo>   from @{sub-build}</echo>
				<ant dir="@{sub-build}" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="compile" />
			</sequential>
		</for>
	</target>

	<!-- jar all the .class files and put the jar in ${war.lib.dir}.-->
	<target name="jar" depends="compile">
		<jar jarfile="${war.lib.dir}/${jar.name}" basedir="${build.dir}/">
		</jar>
	</target>

	<!-- invoke the GWT compiler to generate the javascript.
		The compiler expects a war folder to exists and add folders and files to it.
		 -->
	<target name="gwt-compile">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
			<classpath>
				<pathelement location="${build.dir}" />
				<!-- src dirs are added to ensure that gwt module.xml file(s) are on the classpath. -->
				<pathelement location="${xdstools2.src.dir}" />
				<pathelement location="${sim-common.src.dir}" />
				<pathelement location="${xdstest-gui.src.dir}" />
				<pathelement location="${testengine.src.dir}" />
				<pathelement location="${site-management.src.dir}" />
				<pathelement location="${validators-support.src.dir}" />
				<pathelement location="${registry-msg-formats.src.dir}" />
				<pathelement location="${error-recording.src.dir}" />
				<pathelement location="${registry-metadata.src.dir}" />
				<pathelement location="${common-datatypes.src.dir}" />
				<pathelement location="${actor-transaction.src.dir}" />
				<pathelement location="${direct-sim.src.dir}" />
				<pathelement location="${tk.src.dir}" />
				<pathelement location="${results.src.dir}" />
				<pathelement location="${actorfactory.src.dir}" />
				<path refid="classpath" />
			</classpath>
			<jvmarg value="-Xmx256M" />
			<!-- define the entry point to the application -->
			<arg value="gov.nist.toolkit.xdstools2.Xdstools2" />
		</java>
	</target>

	<!-- This target bypasses GWT-compile. Useful for debugging within Eclipse -->
	<target name="war-prep" depends="compile, jar">
		<ant file="build-war.xml" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="war-prep" />
	</target>

	<target name="war" depends="compile, gwt-compile, jar, war-prep">
		<ant dir="xdstools2" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="war" />
	</target>

	<!-- REVIEW -->
	<target name="listener" depends="compile, war-prep">
		<ant dir="xdstools2" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="listener" />
	</target>


	<!-- ==================== -->

	<target name="ihe" depends="compile">
		<ant dir="xdstools2" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="ihe" />
	</target>

	<target name="ttt" depends="compile">
		<ant dir="xdstools2" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="ttt" />
	</target>

	<!--WHAT FOR -->
	<target name="all" depends="ihe, ttt" />

	<!--WHAT FOR -->
	<target name="tkbuild" depends="compile">
		<ant dir="xdstools2" useNativeBasedir="true" inheritAll="true" inheritRefs="true" target="tkbuild" />
	</target>

	<!--WHAT FOR -->
	<target name="hit-testing">
		<ant dir="xdstools2" target="hit-testing" />
	</target>

	<!--WHAT FOR -->
	<target name="hit-testing-install" depends="hit-testing">
		<scp todir="bill@ttt">
			<fileset dir="xdstest2">
				<include name="listener.jar" />
				<include name="ttt.war" />
			</fileset>
		</scp>
	</target>

	<!--WHAT FOR -->
	<target name="build" depends="compile, war-prep, war" />

	<!--WHAT FOR -->
	<target name="rebuild" depends="clean, build" />

	<!--WHAT FOR -->
	<target name="install-faq-hit" depends="compile-direct-faq">
		<scp todir="bill@ttt/webapps/ROOT/docs/faq">
			<fileset dir="direct-faq">
				<include name="*.html" />
			</fileset>
		</scp>
	</target>

	<!--WHAT FOR -->
	<target name="compile-direct-faq">
		<ant dir="direct-faq" target="compile" />
	</target>

	<!--WHAT FOR -->
	<target name="run-listener" depends="war-prep">
		<echo>Listen on port 12999</echo>
		<java classname="gov.nist.toolkit.directsim.Listener" fork="true" failonerror="true">
			<arg value="12999" />
			<arg value="/Users/bill/tmp/ttt" />
			<arg value="xdstools2/war/WEB-INF/privcert/mykeystore.p12" />
			<classpath>
				<pathelement path="xdstools2/war/WEB-INF/classes" />
				<fileset dir="xdstools2/war/WEB-INF/lib">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

</project>
