<html>

<head><title>Test Engine Concepts</title></head>

<body>

<h1>Test Engine Concepts</h1>

<p>The test engine is composed of the following concepts:


<dl>

<dt><a href="#focus">Focus</a></dt>
<dd>This test engine is a client based testing tool. The engine and its support 
software form a client that is used to test servers.  Here the definition of "client"
is that it initiates the connection and issues a request message which typically
expects a response message in return.
</dd>
<br />

<dt><a href="#testdefinition">Test Definition</a></dt>
<dd>Tests are defined through a structured hierarchy of test elements. The most basic
element is the test step which executes a single transaction made up of a request 
message followed by a response message. Test definitions are stored in a file system
hierarchy where the individual definition elements are XML or simple text files. 
</dd>
<br />

<dt><a href="#testlinkage">Test Linkage</a></dt>
<dd>Several forms of test linkage are supported. In general all forms follow a publish/subscribe
style of operation. Test results are published to log files and other subsequent test steps 
subscribe to the results by making reference to the log files. Typical linkages are ObjectRefs (UUIDs), 
Patient IDs, other simple attribute values.
</dd>
<br />

<dt><a href="#testcollections">Test Collections</a></dt>
<dd>A test collection is a group or list of tests that having something in common. A good example
is all tests that exercise the Register Document Set.b transaction. All tests in a test collection
can be run from a single button push (GUI) or command line invocation. They are useful for 
organizing regression testing.
</dd>
<br />

<dt><a href="#testkit">Testkit</a></dt>
<dd>A testkit is a collection of test definitions. It is a filesystem based hierarchy containing
test definitions and test collection definitions. 
</dd>
<br />

<dt><a href="#log">Log</a></dt>
<dd>The execution of a test creates a test log, an XML file description of inputs, outputs,
linkage, and assertions. Test logs are used to: give developers feedback on their test effort, report
test results for grading, and to help solicit assistance to testing problems.
</dd>
<br />

<dt><a href="#sitedefinitions">Site definitions</a></dt>
<dd>The term site refers to the configuration of actors being tested around the test engine. A
site has a name and a list of transaction to endpoint mappings to be used by the test engine. 
</dd>
<br />

<dt><a href="#affinitydomainconfiguration">Affinity Domain configuration</a></dt>
<dd>The test engine uses the same Affinity Domain configuration file, codes.xml, as the Public
Registry server.
</dd>
<br />

<dt><a href="#statevariables">State Variables</a></dt>
<dd>A collection of state variables are maintained to support test execution.  Examples are
Patient ID and Unique IDs.
</dd>
<br />

<dt><a href="#definitionoftestsuccess">Definition of test success</a></dt>
<dd>What does it mean for a test to be successful?
</dd>
<br />

</dl>

<h2><a name="focus">Focus</a></h2>

<p>This test engine is a client based testing tool. The engine and its support 
software form a client that is used to test servers.  Here the definition of "client"
is that it initiates the connection and issues a request message which typically
expects a response message in return.
It implements the following IHE actors:

<ul>
<li>Document Source
<li>Document Consumer
<li>Document Repository
<li>Initiating Gateway
</ul>

in such a way that they can be used to test these IHE actors:

<ul>
<li>Document Repository
<li>Document Registry
<li>Document Recipient
<li>Responding Gateway
</ul>

<h2><a name="testdefinition">Test Definition</a></h2>

<p>Tests are defined through a structured hierarchy of test elements. The most basic
element is the test step which executes a single transaction made up of a request 
message followed by a response message. Test definitions are stored in a file system
hierarchy where the individual definition elements are XML or simple text files. The elements
of the hierarchy, from smallest to largest, are:

<dl>
<dt>Transaction</dt>
<dd>Definition/selection of the transaction to generate. The XML children of a Transaction
define parameters use to generate the transaction on the wire. Also contains linkage instructions
(publish/subscribe of parameters passed between test steps) and test assertions that 
evaluate the result of the transaction.
</dd>
<br />

<dt>Test Step</dt>
<dd>Definition of a single step of testing.  Always contains a single Transaction.  Also
contains instructions on initiating the environment that a transaction will execute inside of.
</dd>
<br />

<dt>Test Plan</dt>
<dd>A ordered list of test steps. A test plan executes start to finish without interuption. 
The only exception is when the Test Engine itself fails. When executed, a test plan runs
each test step it contains in the order specified. A test plan is always carried in a file
named testplan.xml.
</dd>
<br />

<dt>Test Section</dt>
<dd>A testplan.xml file along with the files it references or depends on. A test
section is a file system directory usually with a simple name like "submit" or "query". 
</dd>
<br />

<dt>Test</dt>
<dd>The definition of a test. It is a file system directory. If the test is registered in
Gazelle, then the name (directory name) is a 5 digit number like 12343. If it is not intended
to be registered in Gazelle the name can be any legal directory name.

<p>A test contains 1 or more test sections. If it contains only a single test section, then 
there is no sub-directory to hold the section, the testplan.xml and attendent files are placed
in this directory. If it contains multiple test sections, then:
<ul>
<li>The test directory contains no testplan.xml file
<li>Each test section is contained in its own sub-directory
<li>The file index.idx is found in the test directory.  This is a simple text file listing
the test sections by name, one name per line. When the test is executed, this
file controls the order of execution of the test sections.
</ul>

<p>When a test is executed, the test engine expects to find either a testplan.xml file
or an index.idx file in the test directory. All names in an index.idx file must identify 
sub-directories.

<p>The test directory should contain a file readme.txt describing the test.  The first line of
this file is a short description of the test.  A listing of the contents of the testkit
can be generated which uses this first line description in the production of the listing.

<p>The test directory may contain a file collections.txt which defines which test collections
this test is part of.  The file is a simple text file with one test collection name placed 
on a line. Tools exist to generate collection lists from this file.
</dd>
<br />

<dt>Test Area</dt>
<dd>The testkit is divided into named areas.  Typical areas are examples, tests, testdata.
</dd>
<br />

</dl>

<h2><a name="testlinkage">Test Linkage</a></h2>

<p>Several forms of test linkage are supported. In general all forms follow a publish/subscribe
style of operation. Test results are published to log files and other subsequent test steps 
subscribe to the results by making reference to the log files. Typical linkages are ObjectRefs (UUIDs), 
Patient IDs, other simple attribute values.

<p>Communication between test steps is through the log files.  A publishing test steps writes
extra content to its log file.  A subscribing test step specifies the test, section, and publication
variable used. The test engine finds the log, extracts the variable value and places it in the
context of the test step to be used.

<p>Two forms of pub/sub are used.  First, commonly used ids are published, such as id and uniqueID, 
automatically for every test step. Nothing needs to be coded at the publish side. At the subscribe
side, an instructoin UseId points to the test, section, step, and variable name of interest.

<p>The second form is called reporting. For publication, the test step codes a Report instruction
which specifies an XPath expression evaluated against its log file and a variable name which is
used to publish the value in the log file.  On the subscribe side, a UseReport instruction
address the publication addressing it by test, section, step, and variable name.

<p>In all cases, the value of a subscription is placed into a variable.  Variables names are
formatted as $name$. Typically, these variable names are used in the input metadata section
of the test step.  The variable names is used as an XML attribute value or the text value of 
an XML element.  The test engine performs the substitution. The result of the substitution is
published to the log file.

<h2><a name="testcollections">Test Collections</a></h2>

<p>A test collection is a group or list of tests that having something in common. A good example
is all tests that exercise the Register Document Set.b transaction. All tests in a test collection
can be run from a single button push (GUI) or command line invocation. They are useful for 
organizing regression testing.

<p>A test declares itself part of a test collection by having a collections.txt file in the 
test directory.  The file lists all collections it is part of, one name per line. A tool
exists to scan the testkit, reading al the collections.txt file, generating collectionName.tc
files in the directory testkit/collections. These files are simple text files containing test
numbers (or names), one number (name) per line.  The command line and GUI forms of the test
engine can run a test collection based on these collectionName.tc files. 

<p>Test collections, when run, execute every test listed.  The results are reported in the 
individual test's log files. To get the status of the test collection, the individual log files
must be scanned. Both the command line and GUI forms of the test engine include tooling to 
run a test collection and list/display the results of all component tests.

<h2><a name="testkit">Testkit</a></h2>

<p>A testkit is a collection of test definitions. It is a filesystem based hierarchy containing
test definitions and test collection definitions.

<p>The testkit is a separate structure from the test engine. When the XDS Toolkit (command line
version of the test engine) is deployed to vendors, the testkit is embedded in the toolkit. But,
the actual linkage between test engine and testkit is through an environment variable so 
it is possible to have multiple testkits and switch between them.  In the command line form,
this is controlled by an environment variable.  No support for this exists within the GUI.

<h2><a name="log">Log</a></h2>

<p>The execution of a test creates a test log, an XML file description of inputs, outputs,
linkage, and assertions. Test logs are used to: give developers feedback on their test effort, report
test results for grading, and to help solicit assistance to testing problems.

<p>Log files are managed differently in the command line tools vs. the GUI.  The command line tool
aims to be a resource usable by one person so all log files go into one directory structure.  If
the tool is shared by multiple developers, each can control the location of their log files by setting
and environment variable. With the GUI form of the tools, it is expected that there will be
multiple concurrent users of the tool, so log files are managed on a per-session basis.

<p>The log directory is structured to match the testkit. A test plan from a section from a test from
an area has a prescribed directory in the testkit to hold the testplan.xml and related files. 
One log file
is generated per testplan.  The directory structure of the testkit is replicated in the log directory,
test plan in a section in a test in an area.

<p>The GUI form of the tool hides this structure since the running of a test (or tool based on
a test) enables an "Inspect" button that allows browsing of the metadata and log file contents.

<p>Log files mimic the structure of the testplan files.  Each test step has a corresponding section
in the log file. 

<h2><a name="sitedefinitions">Site definitions</a></h2>

<p>The term site refers to the configuration of actors being tested around the test engine. A
site has a name and a list of transaction to endpoint mappings to be used by the test engine.

<p>This test engine is always used to test actors whose operation is started by receiving
a message on a net connection. In IHE terminology, a transaction is initiated by a request 
message. The test engine plays the role of the initiating actor. So, the test engine needs
configuration information specifying the endpoint for a particular transaction on a particular
actor. Furthermore, it is common to have multiple testable actors present in an environment. In
a development lab, multiple versions or instances of a Document Registry may be present. The test
engine should be able to address any of them. 

<p>Towards that end, the tools support a concept called a "site". A site is always assigned a name
so there
can be multiple sites.  A site can contain at most one instance of every actor the test engine
is capable of testing. Need to manage 3 Document Registry actor implementations? Define 3 sites each
containing a Document Registry actor implementation. The choose a site when operating the test
engine to determine which registry is tested. This concept is extended for IHE Connectathons.
Each XD* vendor at Connectathon is assigned a site name, usually the company name.  All of their
actor implementations are configured within that site.  If a vendor brings two instances of
an actor then they must get 2 site definitions.

<h2><a name="affinitydomainconfiguration">Affinity Domain configuration</a></h2>

<p>The test engine uses the same Affinity Domain configuration file, codes.xml, as the Public
Registry server.

<p>XDS Toolkit (command line test engine packaging) includes codes.xml in the xdstoolkit/codes
directory.  It can reference another copy by setting the environment variable XDSCodesFile. 
The GUI tool includes codes.xml in the directory toolkitx/codes.

<h2><a name="statevariables">State Variables</a></h2>

<p>A collection of state variables are maintained to support test execution. Because the execution
environment is quite different between the command line version and the GUI version, these
variables are managed in different ways.

<h3>Command Line</h3>

<p>The xdstoolkit directory has a directory xdstest which holds the following contents.

<dl>
<dt>Patient ID</dt>
<dd>The file patientid.txt holds the current Patient ID.  It is updated either manually
or via the PidAllocateEndpoint annotation in actors.xml (site definition). </dd>
<br />

<dt>Alternate Patient ID</dt>
<dd>The file patientid_alt.txt holds an alternate Patient ID.  It is updated manually.</dd>
<br />

<dt>Unique ID</dt>
<dd>The files uniqueid_base.txt and uniqueid_incr.txt when concatenated together make
a valid OID to use as a unique id.  The file uniqueid_base.txt holds an OID base, an OID
with a trailing period (.) and uniqueid_incr.txt holds an integer. 
After every use, the uniqueid_incr.txt is incremented
to the next integer value.
</dd>
<br />

<dt>Source ID</dt>
<dd>The file sourceid.txt holds the SubmissionSet.sourceId for our Document Source.</dd>
<br />

<dt>Certificates</dt>
<dd>The keystores directory holds one or more sub-directories.  Each sub-directory is named
for a testing event.  The environment variable XDSEVENT holds the name of one of these
event defining sub-directories.  Each sub-directory holds a file keystore which is a Java style
keystore. This file is used as both the key store and cert store. It contains exactly one key pair
which is used to represent the toolkit when initiating TLS connections. It may contain
any number of certificates.</dd>
<br />


</dl>

<h3>GUI</h3>

<p>The war file the packages the GUI has a directory toolkitx/xdstest which holds the following contents.
The same list structure is used as above even though the information is managed in a very different way. 
In the command line environment, the state variables are the only form of consistency between 
test executions.  In the GUI form of the tool, the implementing servlet has other options for
state management and the use of file based variables is not a good choice.

<dl>
<dt>Patient ID</dt>
<dd>Patient ID is chosen off a GUI panel and is managed with different code.</dd>
<br />

<dt>Alternate Patient ID</dt>
<dd>Alternate Patient ID is chosen off a GUI panel and is managed with different code.</dd>
<br />

<dt>Unique ID</dt>
<dd>The same base and increment style of OID creation is used.  But, the GUI form of the toolkit
is multi-user so this is handled by initiaing an OID base from a prefix and a timestamp taken
when the user initialized their web server session.  The increment counter is managed is also
managed within the web server session state.
</dd>
<br />

<dt>Source ID</dt>
<dd>The file sourceid.txt holds the SubmissionSet.sourceId for our Document Source. Same as the
command line version.</dd>
<br />

<dt>Certificates</dt>
<dd>The keystores directory holds exactly one keystore. Every user is assigned the same
personality from the contained private key.</dd>
<br />


</dl>



<h2><a name="definitionoftestsuccess">Definition of test success</a></h2>

<p>What does it mean for a test to be successful?

<p>A test invocation launches a hierarchy of test challenges against one or more actors under test.
All components of all test parts must be successful for a test invocation to be considered a success.

</body>

</html>