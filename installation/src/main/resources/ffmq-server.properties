#---------------------------------------------------------------#
#                     FFMQ Server settings                      #
#---------------------------------------------------------------#

#--------------------------------#
#          Management            #
#--------------------------------#

# Destination definitions folder
#--------------------------------
# - Folder where to store/lookup destinations XML descriptors (can be relative)
management.destinationDefinitions.directory=${FFMQ_BASE}/destinations

# Bridge definitions folder
#--------------------------------
# - Folder where to look for bridge definitions XML descriptors (can be relative)
management.bridgeDefinitions.directory=${FFMQ_BASE}/bridges

# Templates folder
#------------------
# - Folder where to look for templates descriptors (can be relative)
management.templates.directory=${FFMQ_BASE}/conf/templates

# Templates mapping file
#------------------------
# - Path to the templates mapping file (can be relative)
management.templates.mapping=${FFMQ_BASE}/conf/templates.mapping

# Queues auto-creation
#----------------------
# - true  : accessing an unknown queue will auto-create it if a corresponding 
#           mapping exist in the templates mapping file
# - false : accessing an unknown queue will throw a JMSException
management.autoCreate.queues=true

# Topics auto-creation
#----------------------
# - true  : accessing an unknown topic will auto-create it if a corresponding 
#           mapping exist in the templates mapping file
# - false : accessing an unknown topic will throw a JMSException
management.autoCreate.topics=true

# Queues auto-deployment on startup
#-----------------------------------
# - true  : the server will try to deploy all existing queues on startup
# - false : queues are only deployed on first use
management.deployOnStartup.queues=true

# Topics auto-deployment on startup
#-----------------------------------
# - true  : the server will try to deploy all existing topics on startup
# - false : topics are only deployed on first use
management.deployOnStartup.topics=true

# Remote administration
#-----------------------
# - true  : allows remote administration of the server through admin queues
#           (this is usually done through the ffmq-admin-client utility)
# - false : disable the remote administration feature
management.remoteAdmin.enabled=true

# Default data directory
#------------------------
# - Folder to use as a data folder for destinations created through remote administration (can be relative)
management.defaultData.directory=${FFMQ_BASE}/data

# JMX support
#-------------
# - true  : start a JMX agent on server startup 
# - false : disable the JMX agent
management.jmx.agent.enabled=true
# RMI port to use for the agent registry
management.jmx.agent.jndi.rmi.port=10003
# RMI address to use for the agent registry (supports address auto-discovery using 'auto:eth0' for example)
management.jmx.agent.rmi.listenAddr=0.0.0.0

#--------------------------------#
#           Listeners            #
#--------------------------------#
# Note : right now, there is only one available listener
#        using TCP sockets 

# General
#--------
# Time to wait for credentials before dropping the client (in seconds)
listener.auth.timeout=5

# TCP listener
#--------------
# - If enabled, the TCP listener will start on server startup
# - You can set the listen address,port and backlog for the listen socket
#    (supports address auto-discovery using 'auto:eth0' for example)
listener.tcp.enabled=true
listener.tcp.useNIO=false
listener.tcp.listenAddr=0.0.0.0
listener.tcp.listenPort=10002
listener.tcp.backLog=50
listener.tcp.capacity=200

# TCP transport settings
#------------------------
transport.tcp.pingInterval=30
transport.tcp.sendQueueMaxSize=1000
transport.tcp.packet.maxSize=1049600
transport.tcp.stream.sendBufferSize=8192
transport.tcp.stream.recvBufferSize=8192
transport.tcp.initialPacketBufferSize=4096
transport.tcp.socket.sendBufferSize=65536
transport.tcp.socket.recvBufferSize=65536
# SSL support (server-side)
transport.tcp.ssl.enabled=false
transport.tcp.ssl.protocol=SSLv3
transport.tcp.ssl.keyManager.algorithm=SunX509
transport.tcp.ssl.keyStore.type=JKS
transport.tcp.ssl.keyStore.path=${FFMQ_BASE}/conf/server-keystore.jks
transport.tcp.ssl.keyStore.password=ffmqpass
transport.tcp.ssl.keyStore.keyPassword=ffmqpass

#--------------------------------#
# Security                       #
#--------------------------------#

# Global security switch
#------------------------
# - true  : enable security checks (you also need to have a valid connector and configuration)
# - false : disable security globally  
security.enabled=false

# Security connector implementation
#-----------------------------------
# - Fully qualified class name of the security connector to use
#    Note : right now, there is only one available connector implementation
#           using an XML descriptor (net.timewalker.ffmq3.security.XMLSecurityConnector)
security.connector=net.timewalker.ffmq3.security.XMLSecurityConnector

# XML Security connector configuration file
#-------------------------------------------
# - Path to the XML configuration file for the XML security connector
security.connector.xml.securityFile=${FFMQ_BASE}/conf/security.xml

#--------------------------------#
# Internal tuning                #
#--------------------------------#

# Asynchronous task manager - Delivery
# - Pool min size (ie. how many threads to create on startup)
asyncTaskManager.notification.threadPool.minSize=5
# - Pool max idle (ie. how many unused threads to keep ready in the pool)
asyncTaskManager.notification.threadPool.maxIdle=10
# - Pool max size (ie. how many threads should we allocate at most)
asyncTaskManager.notification.threadPool.maxSize=15

# Asynchronous task manager - Delivery
# - Pool min size (ie. how many threads to create on startup)
asyncTaskManager.delivery.threadPool.minSize=0
# - Pool max idle (ie. how many unused threads to keep ready in the pool)
asyncTaskManager.delivery.threadPool.maxIdle=5
# - Pool max size (ie. how many threads should we allocate at most)
asyncTaskManager.delivery.threadPool.maxSize=10

# Asynchronous task manager - Disk I/O
# - Pool min size (ie. how many threads to create on startup)
asyncTaskManager.diskIO.threadPool.minSize=1
# - Pool max idle (ie. how many unused threads to keep ready in the pool)
asyncTaskManager.diskIO.threadPool.maxIdle=2
# - Pool max size (ie. how many threads should we allocate at most)
asyncTaskManager.diskIO.threadPool.maxSize=4

# Consumer message prefetching
consumer.prefetch.size=10

# Redelivery delay (in milliseconds)
# - If positive, delay message availability in queue after a rollback
delivery.redeliveryDelay=0


#--------------------------------#
# Logging                        #
#--------------------------------#

# Loggers definitions
log4j.logger.net.timewalker.ffmq3=INFO,logFile
log4j.additivity.net.timewalker.ffmq3=false

# JMX logging
log4j.logger.javax.management=INFO,logFile
log4j.additivity.javax.management=false

# Appenders definitions
log4j.appender.console=org.apache.log4j.ConsoleAppender 
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=[%5p] %m%n

log4j.appender.logFile=org.apache.log4j.RollingFileAppender
log4j.appender.logFile.File=${FFMQ_BASE}/logs/ffmq-server.log
log4j.appender.logFile.MaxFileSize=1000KB
log4j.appender.logFile.MaxBackupIndex=5
log4j.appender.logFile.Append=true
log4j.appender.logFile.layout=org.apache.log4j.PatternLayout
log4j.appender.logFile.layout.ConversionPattern=%d{HHmmss} %5p [%c{1}]{%t} %m%n
