<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="war" name="xdstools2">

	<!-- dependencies -->
	<property name="testkit.dir" location="../testkit" />
	<property name="xdstest2.dir" location="../xdstest2" />
	<property name="resources.dir" location="." />
	<property name="config.dir" location="${resources.dir}/default_config" />

	<!-- define the repositories needed to build the war -->
	<property name="war.toolkitx.dir" location="${war.dir}/toolkitx" />
	<property name="war.testkit.dir" location="${war.toolkitx.dir}/testkit" />
	<property name="war.xdstest.dir" location="${war.toolkitx.dir}/xdstest" />
	<property name="war.sessionCache.dir" location="${war.dir}/SessionCache" />
	<property name="war.documentCache.dir" location="${war.dir}/xdstools2/DocumentCache" />
	<property name="war.mailer.dir" location="${war.dir}/WEB-INF/direct/mailer" />

	<!-- do some work on testkit collections -->
	<target name="update-collections">
		<ant dir="${xdstest2.dir}" antfile="build.xml" target="testkit.collections" inheritAll="true" inheritRefs="true" />
	</target>

	<!-- !! review exclusion list. Duplicate with copy to war.lib step -->
	<target name="war">
		<jar destfile="${target.dir}/${war.name}">
			<fileset dir="war">
				<exclude name="**/rahas*" />
				<exclude name="**/postgres*.jar" />
				<exclude name="**/*servlet-api.jar" />
				<exclude name="**/gwt-user.jar" />
				<exclude name="**/gwt-dev.jar" />
				<exclude name="**/uniqueid_*.txt" />
			</fileset>
		</jar>
	</target>

	<!-- invoke the GWT compiler to generate the javascript.
				The compiler expects a war folder to exists and add folders and files to it.
				 -->
	<target name="gwt-compile">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
			<classpath>
				<pathelement location="${build.dir}" />
				<!-- src dirs are added to ensure that gwt module.xml file(s) are on the classpath. -->
				<pathelement location="${xdstools2.src.dir}" />
				<pathelement location="${sim-common.src.dir}" />
				<pathelement location="${xdstest-gui.src.dir}" />
				<pathelement location="${testengine.src.dir}" />
				<pathelement location="${site-management.src.dir}" />
				<pathelement location="${http.src.dir}" />
				<pathelement location="${validators-support.src.dir}" />
				<pathelement location="${registry-msg-formats.src.dir}" />
				<pathelement location="${error-recording.src.dir}" />
				<pathelement location="${registry-metadata.src.dir}" />
				<pathelement location="${common-datatypes.src.dir}" />
				<pathelement location="${actor-transaction.src.dir}" />
				<pathelement location="${direct-sim.src.dir}" />
				<pathelement location="${tk.src.dir}" />
				<pathelement location="${results.src.dir}" />
				<pathelement location="${actorfactory.src.dir}" />
				<pathelement location="${direct.src.dir}" />
				<path refid="classpath" />
			</classpath>
			<jvmarg value="-Xmx256M" />
			<!-- define the entry point to the application -->
			<arg value="gov.nist.toolkit.xdstools2.Xdstools2" />
		</java>
	</target>

	<target name="war-prep" depends="make-dir, include-jars-in-war, include-classes, copy-resources, assemble-from-testkit, install-cert, doc">
	</target>

	<target name="make-dir">
		<mkdir dir="${war.dir}" />
		<mkdir dir="${war.lib.dir}" />
		<mkdir dir="${war.classes.dir}" />
	</target>

	<!-- copy all runtime libs to the war -->
	<target name="include-classes">
		<copy includeemptydirs="false" overwrite="true" todir="${war.classes.dir}">
			<fileset dir="${build.dir}">
				<include name="**/*.class" />
			</fileset>
		</copy>
	</target>

	<!-- copy all runtime libs to the war -->
	<target name="include-jars-in-war">
		<copy includeemptydirs="false" overwrite="false" todir="${war.lib.dir}">
			<fileset dir="${lib.dir}">
				<exclude name="gwt-user.jar" />
				<exclude name="gwt-dev.jar" />
			</fileset>
		</copy>
	</target>

	<!-- copy resources -->
	<target name="copy-resources">

		<!-- CHECK where we need to put rampart .mar file.
		TODO : it should not be copied from shared-libs-->
		<copy todir="${war.xdstest.dir}/rampart/client_repositories/modules" file="${shared.mar.dir}/addressing-1.5.4.mar" />

		<!-- required directories -->
		<mkdir dir="${war.sessionCache.dir}" />
		<mkdir dir="${war.documentCache.dir}" />
		<mkdir dir="${war.mailer.dir}" />
		<mkdir dir="${war.dir}/scripts"/>

		<!-- copy configuration files -->
		<copy file="${config.dir}/actors.xml" tofile="${war.xdstest.dir}/actors.xml" />
		<!-- TODO : CHECK. QUICK FIX FOR DEBUGGING. WE NEED TO AGREE ON A CONVENTION FOR RESOURCES COPYING-->
		<copy file="${config.dir}/sourceid.txt" tofile="${war.xdstest.dir}/sourceid.txt" />
		
		<!-- copy scripts-->
		<copy todir="war/scripts" overwrite="true">
			<fileset dir="scripts"/>
		</copy>
		
		<!-- TODO check : why do we put them there ? -->
		<copy file="${config.dir}/log4j.properties" todir="${war.classes.dir}" overwrite="yes" />
		<copy file="${config.dir}/schematron.properties" todir="${war.classes.dir}" overwrite="yes" />

		<!-- copy public resources that seems needed -->
		<copy todir="${war.dir}" overwrite="yes">
			<fileset dir="${resources.dir}/public_resources/">
				<exclude name="**/.svn" />
			</fileset>
		</copy>

		<!-- copy private resources -->
		<copy todir="${war.dir}/WEB-INF" overwrite="yes">
			<fileset dir="${resources.dir}/private_resources">
				<exclude name="**/.svn" />
			</fileset>
		</copy>

	</target>

	<!-- copy resoures from testkit -->
	<target name="assemble-from-testkit">
		<mkdir dir="${war.toolkitx.dir}/admin" />
		<copy todir="${war.toolkitx.dir}/admin">
			<fileset file="${testkit.dir}/admin/version">
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		<mkdir dir="${war.testkit.dir}/tests" />
		<copy todir="${war.testkit.dir}/tests">
			<fileset dir="${testkit.dir}/tests">
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		<mkdir dir="${war.testkit.dir}/examples" />
		<copy todir="${war.testkit.dir}/examples">
			<fileset dir="${testkit.dir}/examples">
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		<mkdir dir="${war.testkit.dir}/xcpd" />
		<copy todir="${war.testkit.dir}/xcpd">
			<fileset dir="${testkit.dir}/xcpd">
				<exclude name="**/.svn" />
			</fileset>
		</copy>
		<mkdir dir="${war.testkit.dir}/testdata" />
		<copy todir="${war.testkit.dir}/testdata">
			<fileset dir="${testkit.dir}/testdata">
				<exclude name="**/.svn" />
			</fileset>
		</copy>

		<mkdir dir="${war.testkit.dir}/selftest" />
		<copy todir="${war.testkit.dir}/selftest">
			<fileset dir="${testkit.dir}/selftest">
				<exclude name="**/.svn" />
			</fileset>
		</copy>

		<!-- the target names match the ActorType short names found in ATFactory.java-->
		<copy file="${testkit.dir}/collections/repositoryb.tc" tofile="${war.testkit.dir}/actorcollections/rep.tc" />
		<concat destfile="${war.testkit.dir}/actorcollections/reg.tc">
			<filelist dir="${testkit.dir}/collections" files="registryb.tc, update.tc" />
		</concat>
		<copy file="${testkit.dir}/collections/Document_Recipient.tc" tofile="${war.testkit.dir}/actorcollections/rec.tc" />
		<copy file="${testkit.dir}/collections/RG.tc" tofile="${war.testkit.dir}/actorcollections/rg.tc" />
		<copy file="${testkit.dir}/collections/Initialize_for_Stored_Query.tc" tofile="${war.testkit.dir}/actorcollections/Initialize_for_Stored_Query.tc" />

		<!-- !! kept for debugging. Must be removed afetrwards-->
		<!--
		<copy file="${testkit.dir}/collections/registryb.tc" tofile="${war.testkit.dir}/actorcollections/reg.tc" />
		<copy file="${testkit.dir}/collections/repositoryb.tc" tofile="${war.testkit.dir}/actorcollections/rep.tc" />
		<copy file="${testkit.dir}/collections/update.tc" tofile="${war.testkit.dir}/actorcollections/update.tc" />
		<copy file="${testkit.dir}/collections/Document_Recipient.tc" tofile="${war.testkit.dir}/actorcollections/rec.tc" />
		<copy file="${testkit.dir}/collections/RG.tc" tofile="${war.testkit.dir}/actorcollections/rg.tc" />
		-->
	</target>

	<!-- REVIEW where those certs come from -->
	<target name="install-cert">
		<mkdir dir="${war.dir}/pubcert" />
		<copy file="${resources.dir}/cert/mycert" tofile="${war.dir}/pubcert/ttt_pem.txt" overwrite="yes" />
		<copy file="${resources.dir}/cert/hit-testing.nist.gov.der" tofile="${war.dir}/pubcert/hit-testing.nist.gov.der" overwrite="yes" />
		<copy file="${resources.dir}/cert/invtrustrel.der" tofile="${war.dir}/pubcert/invtrustrel.der" overwrite="yes" />
		<mkdir dir="${war.dir}/WEB-INF/privcert" />
		<copy file="${resources.dir}/cert/mykeystore.p12" todir="${war.dir}/WEB-INF/privcert" overwrite="yes" />
	</target>

	<target name="doc">
		<mkdir dir="${war.dir}/doc" />
		<copy todir="${war.dir}/doc">
			<fileset dir="${resources.dir}/public_resources/doc" />
		</copy>
	</target>

	<!-- clean but exclude web.xml and gwt-servlet.jar (to pacify eclipse gwt plugin) -->
	<target name="clean">
		<delete includeemptydirs="true">
			<fileset dir="${war.dir}" includes="**/*">
				<exclude name="**/web.xml" />
				<exclude name="**/gwt-servlet.jar" />
			</fileset>
		</delete>
	</target>


	<!-- REVIEW : this task seems to basically jar all the class files + some properties -->
	<target name="listener" depends="war-prep">
		<delete file="listener.jar" />
		<jar destfile="listener.jar">
			<fileset dir="war/WEB-INF">
				<include name="**/classes/**/*.class" />
				<include name="**/classes/**/*.properties" />
				<include name="**/*.p12" />
				<include name="**/lib/*" />
				<exclude name="**/*.jar" />
				<exclude name="**/uniqueid_*.txt" />
			</fileset>
		</jar>
	</target>

	<!-- ============================================ -->

	<!-- !! check that this target works  -->
	<target name="log4j">
		<copy file="log4j.properties" todir="war/WEB-INF/classes" overwrite="yes" />
	</target>

	<target name="ihe" depends="war-prep, ihe-config">
		<move file="war.war" tofile="xdstools2.war" />
	</target>

	<target name="ttt" depends="war-prep, listener, ttt-config">
		<move file="${war.name}" tofile="ttt.war" />
	</target>

	<target name="ihe-config">
		<copy file="war/WEB-INF/toolkit.properties.ihe" tofile="war/WEB-INF/toolkit.properties" overwrite="yes" />
	</target>

	<target name="ttt-config">
		<copy file="war/WEB-INF/toolkit.properties.ttt" tofile="war/WEB-INF/toolkit.properties" overwrite="yes" />
	</target>




</project>
